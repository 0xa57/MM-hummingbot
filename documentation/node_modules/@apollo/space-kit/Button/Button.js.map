{"version":3,"file":"Button.js","sources":["../src/Button/Button.tsx"],"sourcesContent":["import { colors, ShadedColor } from \"../colors\";\nimport * as CSS from \"csstype\";\nimport { base } from \"../typography\";\nimport { ClassNames } from \"@emotion/core\";\nimport { getOffsetInPalette } from \"../colors/utils/getOffsetInPalette\";\nimport tinycolor from \"tinycolor2\";\nimport React from \"react\";\nimport classnames from \"classnames\";\nimport { LoadingSpinner } from \"../Loaders\";\nimport { assertUnreachable } from \"../shared/assertUnreachable\";\n\ntype TLength = string | 0 | number;\n\n/**\n * Save a default color so we can check if we used the default or not. The\n * default color has a few special properties.\n */\nconst defaultColor = colors.silver.light;\n\n/**\n * Get the button's text color\n */\nfunction getTextColor({\n  color,\n  feel,\n  theme,\n  mode,\n}: {\n  color: NonNullable<Props[\"color\"]>;\n  feel: NonNullable<Props[\"feel\"]>;\n  theme: NonNullable<Props[\"theme\"]>;\n  mode?: CSS.SimplePseudos;\n}): CSS.ColorProperty | undefined {\n  // Text color will always be the same for secondary buttons\n  if (color === colors.white) {\n    return colors.grey.darker;\n  }\n\n  switch (feel) {\n    case \"raised\":\n      // Set the base (meaning no pseudo-selectors) text color for raised\n      // buttons. Otherwise return `undefined` to not change the color.\n      //\n      // We have some special logic for the raised color; set the text color to\n      // be what is most readable between white and the default text color and\n      // the _hover_ color's background. This is overrideable by the user, but\n      // it shouldn't need to be.\n      return !mode\n        ? tinycolor\n            .mostReadable(\n              getHoverBackgroundColor({ color, feel, theme }),\n              [colors.white, colors.grey.darker],\n              {\n                level: \"AA\",\n                size: \"small\",\n              }\n            )\n            .toString()\n        : undefined;\n    case \"flat\":\n      if (color === defaultColor) {\n        return theme === \"dark\" ? colors.grey.light : colors.grey.darker;\n      }\n\n      // We have a custom color and we're in dark mode, lighten the base and\n      // focused colors 1 shade.\n      if (theme === \"dark\" && (!mode || mode === \":focus\")) {\n        return getOffsetInPalette(1, \"lighter\", color);\n      }\n\n      return color;\n    /* istanbul ignore next */\n    default:\n      throw assertUnreachable(feel);\n  }\n}\n\n/**\n * Get the button's height\n */\nfunction getHeight({\n  size,\n}: {\n  size: NonNullable<Props[\"size\"]>;\n}): CSS.HeightProperty<TLength> {\n  switch (size) {\n    case \"small\":\n      return 28;\n    case \"default\":\n      return 36;\n    case \"large\":\n      return 42;\n    /* istanbul ignore next */\n    default:\n      throw assertUnreachable(size);\n  }\n}\n\n/**\n * Get the hover background color\n */\nfunction getHoverBackgroundColor({\n  color,\n  feel,\n  theme,\n}: {\n  color: NonNullable<Props[\"color\"]>;\n  feel: NonNullable<Props[\"feel\"]>;\n  theme: NonNullable<Props[\"theme\"]>;\n}): CSS.BackgroundColorProperty {\n  if (color === colors.white) {\n    // Special case for secondary buttons\n    return colors.silver.light;\n  }\n\n  switch (feel) {\n    case \"flat\":\n      // Hardcode if we're using the default color (special case), otherwise get\n      // the next lightest color.\n      if (color === defaultColor) {\n        return theme === \"light\" ? colors.silver.light : colors.grey.dark;\n      }\n\n      return getOffsetInPalette(Infinity, \"lighter\", color);\n    case \"raised\":\n      // One shade darker\n      return getOffsetInPalette(1, \"darker\", color);\n    /* istanbul ignore next */\n    default:\n      throw assertUnreachable(feel);\n  }\n}\n\n// Types that could use some improvement:\n// * Don't allow `children` and `icon` to be missing\n// * Don't allow `children` when `FAB`\n//\n// I was able to get guarantees to work, but only with very cryptic errors. I\n// decided it'd be best, for the time being, to `throw` if we use things\n// incorrectly.\ninterface Props\n  extends Omit<\n    React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>,\n    \"css\"\n  > {\n  /**\n   * Override the the default element used to render a button\n   *\n   * All props provided will be merged with props that `Button` adds, including\n   * `className`s being merged.\n   *\n   * @default <button />\n   */\n  as?: React.ReactElement;\n\n  /**\n   * Base color to calculate all other colors with\n   *\n   * This has a special meaning for buttons with a \"flat\" feel; this will change\n   * the text color as well as the background colors.\n   *\n   * Pass `colors.white` to treat this button as a secondary button\n   *\n   * @default colors.silver.light\n   */\n  color?: ShadedColor | typeof colors[\"white\"];\n\n  /**\n   * If the button will appear and behave disabled.\n   *\n   * This prop is explicitly here and not granted by extension because it\n   * doesn't exist on HTMLAttributes, but is essential to rendering correctly.\n   *\n   * @default false\n   */\n  disabled?: boolean;\n\n  /**\n   * Icon to use at the end of a button\n   *\n   * The size of icons will be automatically determined, but can be overriden\n   */\n  endIcon?: React.ReactElement;\n\n  /**\n   * Which feel to display\n   *\n   * The options are as follows:\n   *\n   * - `\"raised\"` (default): A button with a border and a background\n   * - `\"flat\"`: No background or border\n   *\n   * @default \"raised\"\n   */\n  feel?: \"raised\" | \"flat\";\n\n  /**\n   * Either an icon to show to the left of the button text, or on it's own\n   */\n  icon?: React.ReactElement;\n\n  /**\n   * Show a loading spinner in place of the original icon on this button\n   *\n   * Automatically disables the button as well\n   */\n  loading?: boolean;\n\n  /**\n   * Size of the button\n   *\n   * @default \"default\"\n   */\n  size?: \"default\" | \"small\" | \"large\";\n\n  /**\n   * Theme to display the button\n   *\n   * Different themes have different box-shadows. Right now we have these\n   * options, but this may expand in the future:\n   *\n   * - `\"light\"` (default)\n   * - `\"dark\"`\n   *\n   * @default \"light\"\n   */\n  theme?: \"light\" | \"dark\";\n\n  /**\n   * The type of the button\n   *\n   * This isn't included in HTMLAttributes but it's a very common property\n   * passed to a button, so we're including it here. If you pass `type` prop\n   * when using any element besides `<button>` you will get React warnings about\n   * passing unrecognized props to an element.\n   */\n  type?: \"button\" | \"submit\" | \"reset\" | undefined;\n\n  /**\n   * Button variants\n   *\n   * The options are as follows:\n   *\n   * - `undefined` (default): A button with text and an optional icon\n   * - `\"fab\"`: Floating action button\n   *\n   *   You must include an `icon` prop and you must _not_ include a `children`\n   *   prop for a floating action button.\n   *\n   *   _Note: this is not type checked; it will cause a runtime error_\n   */\n  variant?: \"fab\";\n}\n\n/**\n * Style system for Space Kit buttons\n *\n * This is intended to be used as an abstraction for your project's style guide.\n *\n * @see https://zpl.io/amdN6Pr\n */\nexport const Button = React.forwardRef<HTMLElement, Props>(\n  (\n    {\n      as = <button />,\n      children,\n      color = defaultColor,\n      disabled: disabledProps = false,\n      variant,\n      endIcon,\n      feel = \"raised\",\n      icon: iconProp,\n      loading,\n      size = \"default\",\n      theme = \"light\",\n      ...otherProps\n    },\n    ref\n  ) => (\n    <ClassNames>\n      {({ cx, css }) => {\n        /**\n         * If the button is in a `loading` state, then always treat it as\n         * disabled. Otherwise, try to use `as.props`. Finally, use `props`\n         */\n        const disabled: boolean =\n          loading ||\n          (as.props.disabled != null ? as.props.disabled : disabledProps);\n\n        const icon = loading ? (\n          <LoadingSpinner\n            size=\"2xsmall\"\n            theme={theme === \"light\" ? \"grayscale\" : \"dark\"}\n          />\n        ) : (\n          iconProp\n        );\n\n        /**\n         * Icon size in pixels\n         *\n         * This is stored so we can use the same value for `height` and `width`\n         */\n        const iconSize = size === \"small\" ? 12 : size === \"large\" ? 24 : 16;\n\n        const iconOnly = !children;\n\n        if (variant === \"fab\") {\n          if (!icon) {\n            throw new TypeError(\"FAB buttons are required to have an `icon`\");\n          } else if (children) {\n            throw new TypeError(\n              \"FAB buttons cannot have children, only an `icon`\"\n            );\n          }\n        }\n\n        const propsToPass = {\n          ...otherProps,\n          ref,\n          className: classnames(\n            // I couldn't figure out how to get TypeScript to recognize that\n            // `className` can be in `otherProps`.\n            \"className\" in otherProps && (otherProps as any).className,\n            cx(\n              css([\n                {\n                  // We need to also set the `:hover` on `:disabled` so it has a\n                  // higher specificity than any `:hover` classes passed in. This\n                  // also means that both of these need to be overriden if we want\n                  // to use a custom disabled color.\n                  \"&[disabled], &[disabled]:hover\": {\n                    backgroundColor:\n                      feel === \"flat\"\n                        ? \"transparent\"\n                        : theme === \"light\"\n                        ? colors.silver.light\n                        : colors.grey.dark,\n                    boxShadow: \"none\",\n                    color:\n                      feel === \"flat\" && theme === \"dark\"\n                        ? colors.grey.dark\n                        : colors.grey.light,\n                  },\n\n                  backgroundColor:\n                    color === colors.white\n                      ? colors.white\n                      : feel === \"raised\"\n                      ? color\n                      : \"transparent\",\n\n                  borderRadius: variant === \"fab\" ? \"100%\" : 4,\n\n                  borderWidth: 0,\n                  ...(feel !== \"flat\" && {\n                    boxShadow:\n                      theme === \"light\"\n                        ? \"0 1px 4px 0 rgba(18, 21, 26, 0.04), inset 0 0 0 1px rgba(18, 21, 26, 0.2), inset 0 -1px 0 0 rgba(18, 21, 26, 0.05)\"\n                        : \"0 0 0 1px rgba(18, 21, 26, 0.2), 0 1px 4px 0 rgba(18, 21, 26, 0.08), 0 1px 0 0 rgba(18, 21, 26, 0.05)\",\n                  }),\n\n                  color: getTextColor({ color, feel, theme }),\n\n                  cursor: loading || disabled ? \"default\" : \"pointer\",\n\n                  // Vertically center children\n                  display: \"inline-flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"center\",\n\n                  height: getHeight({ size }),\n\n                  minWidth: iconOnly\n                    ? size === \"small\"\n                      ? 28\n                      : size === \"large\"\n                      ? 42\n                      : 36\n                    : size === \"small\"\n                    ? 76\n                    : size === \"large\"\n                    ? 112\n                    : 100,\n\n                  // We have to set the Y padding because browsers (at least Chrome) has\n                  // a non-symmetrical vertical padding applied by default.\n                  padding: `0 ${iconOnly ? 0 : 12}px`,\n\n                  ...(size === \"small\"\n                    ? base.small\n                    : size === \"large\"\n                    ? base.large\n                    : base.base),\n\n                  fontWeight: 600,\n\n                  // Disable the outline because we're setting a custom `:active` style\n                  outline: 0,\n\n                  textDecoration: \"none\",\n\n                  whiteSpace: \"nowrap\",\n                },\n\n                !disabled && {\n                  \":hover, &[data-force-hover-state]\": {\n                    backgroundColor: getHoverBackgroundColor({\n                      color,\n                      feel,\n                      theme,\n                    }),\n                    color: getTextColor({ color, feel, theme, mode: \":hover\" }),\n                    ...(feel !== \"flat\" && {\n                      // The `box-shadow` property is copied directly from Zeplin\n                      boxShadow:\n                        theme === \"light\"\n                          ? \"0 5px 10px 0 rgba(18, 21, 26, 0.08), inset 0 0 0 1px rgba(18, 21, 26, 0.2), inset 0 -1px 0 0 rgba(18, 21, 26, 0.05)\"\n                          : \"0 0 0 1px rgba(18, 21, 26, 0.2), 0 5px 10px 0 rgba(18, 21, 26, 0.12), 0 1px 0 0 rgba(18, 21, 26, 0.05)\",\n                    }),\n                  },\n                  \":focus, &[data-force-focus-state]\": {\n                    ...(feel === \"flat\" && {\n                      backgroundColor:\n                        theme === \"light\" ? colors.white : \"#000\",\n                      color:\n                        theme === \"light\"\n                          ? colors.blue.base\n                          : colors.blue.light,\n                    }),\n                    // The `box-shadow` property is copied directly from Zeplin for the\n                    // light theme. For the dark theme we use a variant of the color to\n                    // make the borders sharp.\n                    boxShadow: `0 1px 4px 0 rgba(18, 21, 26, 0.08), 0 0 0 2px ${\n                      theme === \"light\" ||\n                      color === defaultColor ||\n                      color === colors.white\n                        ? \"#bbdbff\"\n                        : getOffsetInPalette(Infinity, \"lighter\", color)\n                    }, inset 0 0 0 1px ${\n                      color === defaultColor || color === colors.white\n                        ? \"#2075d6\"\n                        : getOffsetInPalette(1, \"darker\", color)\n                    }, inset 0 -1px 0 0 rgba(18, 21, 26, 0.05)`,\n                  },\n                  \"&:active, &[data-force-active-state], &[aria-expanded=true]\": {\n                    ...(getTextColor({\n                      color,\n                      feel,\n                      theme,\n                      mode: \":hover\",\n                    }) && {\n                      color: getTextColor({\n                        color,\n                        feel,\n                        theme,\n                        mode: \":active\",\n                      }),\n                    }),\n\n                    backgroundColor:\n                      color === colors.white\n                        ? colors.white\n                        : feel === \"raised\"\n                        ? color\n                        : color === defaultColor\n                        ? theme === \"dark\"\n                          ? colors.grey.darker\n                          : colors.silver.base\n                        : getOffsetInPalette(2, \"lighter\", color),\n\n                    // The `box-shadow` properties are copied directly from Zeplin\n                    boxShadow:\n                      feel !== \"flat\"\n                        ? theme === \"light\"\n                          ? \"inset 0 0 0 1px rgba(18, 21, 26, 0.2), inset 0 -1px 0 0 rgba(18, 21, 26, 0.05), inset 0 2px 2px 0 rgba(18, 21, 26, 0.12)\"\n                          : \"0 0 0 1px rgba(18, 21, 26, 0.2), 0 1px 4px 0 rgba(18, 21, 26, 0.08), 0 -1px 0 0 rgba(18, 21, 26, 0.16), inset 0 1px 2px 0 rgba(18, 21, 26, 0.42)\"\n                        : \"none\",\n                    outline: \"0\",\n                  },\n                },\n              ])\n            )\n          ),\n          disabled,\n          onClick: (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n            if (disabled) return event.preventDefault();\n\n            if (otherProps.onClick) {\n              otherProps.onClick(event);\n            }\n\n            if (as.props.onClick) {\n              as.props.onClick(Event);\n            }\n\n            // Remove the focus\n            event.currentTarget.blur();\n          },\n\n          children: (\n            <>\n              {icon && (\n                <span\n                  className={cx(\n                    css({\n                      alignItems: \"center\",\n                      // This needs to be `inline-flex` and not the default of\n                      // `inline-block` to vertically center the icon automatically\n                      display: \"inline-flex\",\n                      height: iconSize,\n                      justifyContent: \"center\",\n                      // The `4px` will be on the right to separate the icon from the text\n                      margin: iconOnly ? 0 : \"0 4px 0\",\n                      width: iconSize,\n                    })\n                  )}\n                >\n                  {icon}\n                </span>\n              )}\n              {children}\n              {endIcon && !loading && (\n                <span\n                  className={cx(\n                    css({\n                      alignItems: \"center\",\n                      // This needs to be `inline-flex` and not the default of\n                      // `inline-block` to vertically center the icon automatically\n                      display: \"inline-flex\",\n                      height: iconSize,\n                      justifyContent: \"center\",\n                      // The `4px` will be on the right to separate the icon from the text\n                      margin: iconOnly ? 0 : \"0 0 0 4px\",\n                      width: iconSize,\n                    })\n                  )}\n                >\n                  {endIcon}\n                </span>\n              )}\n            </>\n          ),\n        };\n\n        return React.cloneElement(as, {\n          ...propsToPass,\n          className: classnames(\n            propsToPass.className,\n            as.props.className,\n            // If the parent component is using emotion with the jsx pragma, we\n            // have to get fancy and intercept the styles to use with the\n            // `ClassNames` wrapper.\n            as.props.css ? css(as.props.css.styles) : null\n          ),\n        });\n      }}\n    </ClassNames>\n  )\n);\n"],"names":["colors","getOffsetInPalette","assertUnreachable","React","ClassNames","LoadingSpinner","base.small","base.large","base.base"],"mappings":"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"}