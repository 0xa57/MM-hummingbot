'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _tslib = require('../_tslib-bcbe0269.js');
var core = require('@emotion/core');
var React = require('react');
var React__default = _interopDefault(React);
var colors = require('../colors/colors.js');
var assertUnreachable = require('../assertUnreachable-18645656.js');
var tinycolor = _interopDefault(require('tinycolor2'));
var index$2 = require('../index-272aedc8.js');

function getIconHorizontalPadding(iconSize) {
    switch (iconSize) {
        case "normal":
            return 12;
        case "small":
            return 8;
        default:
            assertUnreachable.assertUnreachable(iconSize);
    }
}
function getIconSize(iconSize) {
    switch (iconSize) {
        case "normal":
            return 16;
        case "small":
            return 10;
        default:
            assertUnreachable.assertUnreachable(iconSize);
    }
}
function getIconMarginLeft(iconSize) {
    switch (iconSize) {
        case "normal":
            return "initial";
        case "small":
            return -7;
        default:
            assertUnreachable.assertUnreachable(iconSize);
    }
}
var MenuItem = React__default.forwardRef(function (_a, ref) {
    var children = _a.children, endIcon = _a.endIcon, _b = _a.interactive, interactive = _b === void 0 ? true : _b, onClick = _a.onClick, _c = _a.selected, selected = _c === void 0 ? false : _c, startIcon = _a.startIcon, props = _tslib.__rest(_a, ["children", "endIcon", "interactive", "onClick", "selected", "startIcon"]);
    var iconSize = index$2.useMenuIconSize();
    var menuItemClickListener = index$2.useMenuItemClickListener();
    var menuColor = index$2.useMenuColor();
    var selectedTextColor = tinycolor
        .mostReadable(menuColor, [colors.colors.white, colors.colors.grey.darker], {
        level: "AA",
        size: "small",
    })
        .toString();
    var selectedBackgroundColor = menuColor;
    var selectedStyles = interactive && {
        backgroundColor: selectedBackgroundColor,
        color: selectedTextColor,
    };
    var hoverStyles = interactive && {
        backgroundColor: colors.colors.silver.light,
    };
    /**
     * Handler to call `onClick` handler passed in props and also handler passed
     * via context
     */
    var delegatingOnClick = React__default.useCallback(function (event) {
        if (onClick)
            onClick(event);
        if (menuItemClickListener)
            menuItemClickListener(event);
    }, [menuItemClickListener, onClick]);
    return (core.jsx("div", _tslib.__assign({}, props, { onClick: delegatingOnClick, css: core.css(_tslib.__assign(_tslib.__assign(_tslib.__assign(_tslib.__assign({}, (selected && selectedStyles)), { "&[aria-expanded=true]": selectedStyles }), (!selected && { "&:hover": hoverStyles })), { cursor: interactive ? "pointer" : undefined, borderRadius: 4, display: "flex", paddingLeft: 12, paddingRight: 12, paddingTop: 4, paddingBottom: 4 })), ref: ref }),
        typeof startIcon !== "undefined" && (core.jsx("div", { css: core.css({
                flex: "none",
                height: 20,
                marginLeft: getIconMarginLeft(iconSize),
                marginRight: getIconHorizontalPadding(iconSize),
                width: getIconSize(iconSize),
            }) }, startIcon)),
        core.jsx("div", { css: core.css({
                flex: "1",
                /* This is weird but it's necessary to truncate menu items */
                minWidth: 0,
            }) }, children),
        typeof endIcon !== "undefined" && (core.jsx("div", { css: core.css({
                flex: "none",
                height: 20,
                marginLeft: getIconHorizontalPadding(iconSize),
                width: getIconSize(iconSize),
            }) }, endIcon))));
});

exports.MenuItem = MenuItem;
//# sourceMappingURL=index.js.map
