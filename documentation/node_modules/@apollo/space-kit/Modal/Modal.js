'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _tslib = require('../_tslib-bcbe0269.js');
var core = require('@emotion/core');
var React = require('react');
var React__default = _interopDefault(React);
var classnames = _interopDefault(require('classnames'));
require('../fonts/fonts.js');
var base$1 = require('../base-1dde5d6e.js');
require('../mono-f4fb9dce.js');
var colors = require('../colors/colors.js');
var assertUnreachable = require('../assertUnreachable-18645656.js');
var index = require('../SpaceKitProvider/index.js');
var framerMotion = require('framer-motion');

var modalBackdrop = core.css(templateObject_1 || (templateObject_1 = _tslib.__makeTemplateObject(["\n  position: fixed;\n  display: flex;\n  align-items: center;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n\n  &:after {\n    position: fixed;\n    z-index: 10;\n    content: \"\";\n    background-color: ", ";\n    opacity: 0.7;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    z-index: -1;\n    height: 100vh;\n    width: 100vw;\n  }\n"], ["\n  position: fixed;\n  display: flex;\n  align-items: center;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n\n  &:after {\n    position: fixed;\n    z-index: 10;\n    content: \"\";\n    background-color: ", ";\n    opacity: 0.7;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    z-index: -1;\n    height: 100vh;\n    width: 100vw;\n  }\n"])), colors.colors.grey.lighter);
function getModalWidth(size) {
    switch (size) {
        case "small":
            return 460;
        case "medium":
            return 600;
        case "large":
            return 800;
        /* istanbul ignore next */
        default:
            throw assertUnreachable.assertUnreachable(size);
    }
}
var Modal = function (_a) {
    var _b = _a.as, as = _b === void 0 ? core.jsx("div", null) : _b, className = _a.className, _c = _a.containerAs, containerAs = _c === void 0 ? core.jsx("div", null) : _c, title = _a.title, description = _a.description, children = _a.children, onClose = _a.onClose, size = _a.size, bottomLeftText = _a.bottomLeftText, primaryAction = _a.primaryAction, secondaryAction = _a.secondaryAction;
    var disableAnimations = index.useSpaceKitProvider().disableAnimations;
    React.useEffect(function () {
        function handleKeyDown(event) {
            if (event.code === "Escape" && onClose) {
                onClose();
            }
        }
        // add an event listener for all clicks
        document.addEventListener("keydown", handleKeyDown);
        return function () { return document.removeEventListener("keydown", handleKeyDown); };
    }, [onClose]);
    var type = as.type;
    if (!type || type === "custom") {
        // TypeScript will give us some protection here, but we need to guarantee
        // that `as` is an element that `motion` supports
        throw new TypeError("`as` must be an element with a corresponding element in `Framer.motion`");
    }
    /**
     * Framer motion component to render. The type will be taken from the `as`
     * prop
     */
    var MotionComponent = framerMotion.motion[type];
    return (core.jsx(core.ClassNames, null, function (_a) {
        var css = _a.css, cx = _a.cx;
        return React__default.createElement(containerAs.type, _tslib.__assign(_tslib.__assign({ onClick: onClose }, containerAs.props), { className: classnames(containerAs.props.className, cx(css(modalBackdrop))) }), core.jsx(MotionComponent, _tslib.__assign({}, as.props, { animate: { opacity: 1, scale: 1 }, initial: disableAnimations ? false : { opacity: 0, scale: 0.9 }, transition: {
                scale: {
                    type: "spring",
                    stiffness: 150,
                    damping: 200,
                    mass: 0.2,
                    velocity: 8,
                },
            }, onClick: 
            // Ignore the type of `event` because the React.MouseEvent
            // generic will be a union of 170 different DOM elements;
            // TypeScript can't handle that.
            //
            // @ts-ignore
            function (event) {
                var _a, _b;
                event.stopPropagation();
                (_b = (_a = as.props).onClick) === null || _b === void 0 ? void 0 : _b.call(_a, event);
            }, className: classnames(className, cx(css({
                backgroundColor: "white",
                borderRadius: 12,
                boxShadow: "0 16px 32px 0 rgba(0, 0, 0, 0.12), 0 0 0 1px rgba(18, 21, 26, 0.04)",
                maxHeight: "80%",
                minWidth: 400,
                opacity: 1,
                overflowY: "auto",
                padding: size === "large" ? "40px" : "32px",
                position: "absolute",
                width: getModalWidth(size),
                zIndex: 11,
                marginLeft: "auto",
                marginRight: "auto",
                left: 0,
                right: 0,
            })), as.props.className, 
            // If the parent component is using emotion with the jsx pragma, we
            // have to get fancy and intercept the styles to use with the
            // `ClassNames` wrapper.
            as.props.css ? css(as.props.css.styles) : null) }),
            core.jsx("div", null,
                title && (core.jsx("div", null,
                    core.jsx("div", { css: _tslib.__assign({ color: colors.colors.black.base, marginBottom: 10 }, (size === "small"
                            ? _tslib.__assign(_tslib.__assign({}, base$1.large), { fontWeight: 600 }) : base$1.xxlarge)) }, title))),
                description && (core.jsx("div", { css: _tslib.__assign(_tslib.__assign({}, base$1.base), { color: colors.colors.black.base }) }, description))),
            core.jsx("div", { css: {
                    marginTop: size === "large" ? 24 : size === "medium" ? 16 : 12,
                } }, children),
            (primaryAction || secondaryAction || bottomLeftText) && (core.jsx("div", { css: {
                    alignItems: "center",
                    display: "flex",
                    justifyContent: "flex-end",
                    marginTop: size === "medium" ? 32 : 24,
                } },
                bottomLeftText && (core.jsx("div", { css: { marginRight: "auto" } }, bottomLeftText)),
                secondaryAction && (core.jsx("div", { css: { marginRight: 12 } }, secondaryAction)),
                primaryAction && core.jsx("div", null, primaryAction)))));
    }));
};
var templateObject_1;

exports.Modal = Modal;
//# sourceMappingURL=Modal.js.map
