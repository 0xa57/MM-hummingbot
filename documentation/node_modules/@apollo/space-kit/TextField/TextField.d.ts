import React from "react";
interface Props {
    /**
     * Passed through to the underlying `input`
     */
    autoFocus?: boolean;
    /**
     * Class name that will be applied to the wrapping `div` around the component
     */
    className?: string;
    /**
     * Value an uncontrolled input will default to
     */
    defaultValue?: string;
    /**
     * Visible description
     */
    description?: React.ReactNode;
    /**
     * Disable the input
     */
    disabled?: boolean;
    /**
     * Content to show in the event there is an error in the input. This will
     * change the appearance of the input and will replace text passed via
     * `helper`.
     */
    error?: React.ReactNode;
    /**
     * Extra information displayed below input. This will be replaced by `error` if it is passed
     */
    helper?: React.ReactNode;
    /**
     * Icon to have at the left of the input
     */
    icon?: React.ReactNode;
    /**
     * Override how the `input` is rendered. You can pass either an intrinisic jsx element as a string (like "input") or a react element (`<input />`)
     *
     * If you pass a react element, props that we add are spread onto the input.
     *
     * @default "input"
     */
    inputAs?: React.ReactElement | keyof JSX.IntrinsicElements;
    onFocus?: React.FocusEventHandler<HTMLInputElement>;
    onBlur?: React.FocusEventHandler<HTMLInputElement>;
    onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;
    /**
     * Visible title
     */
    label?: React.ReactNode;
    /**
     * A short hint that describes the expected value of the input field
     */
    placeholder?: string;
    /**
     * Size of text and padding inside the input
     *
     * Defaults to `standard`
     */
    size?: "small" | "standard" | "large";
    /**
     * Whether or not to show the circle i icon to the left of helper text
     *
     * Defaults to `false`
     */
    showInfoIcon?: boolean;
    /**
     * Value of a controlled input
     */
    value?: string | number;
    /**
     * Name to give the input
     */
    name?: string;
    /**
     * Type of input field
     */
    type?: string;
}
/**
 * Emulates an `<input>` with the automatic layout of a label, description, helper
 * text, and error text.
 */
export declare const TextField: React.FC<Props>;
export {};
