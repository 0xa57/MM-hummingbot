import React from "react";
import { ShadedColor } from "../colors";
/**
 * Enumeration of all icon sizes
 *
 * This uses string literals instead of a TypeScript union so we can use
 * strings, like `"small"`, for props instead of `IconSize.small`
 */
declare type IconSize = "small" | "normal";
interface MenuConfig {
    /**
     * Color of the menu. This will be used to programtically alter hover,
     * selected, and text colors
     *
     * @default "inherit"
     */
    color: ShadedColor;
    /**
     * Icon size to use for all descendents
     */
    iconSize: IconSize;
}
/**
 * Provider to set menu config on the context
 *
 * This value is immutable; it's defined when instantiated
 */
export declare const MenuConfigProvider: React.FC<Partial<MenuConfig>>;
interface withMenuIconSizeProps {
    /**
     * Render prop function. Calls the callback in the shape of
     *
     * ```jsx
     * { iconSize: IconSize }
     * ```
     */
    children: (renderPropValues: Pick<MenuConfig, "iconSize">) => ReturnType<React.FC>;
}
/**
 * Extract `IconSize` from context.
 *
 * *Avoid this component.* Use `useMenuIconSize` instead. This is intended to be
 * used _only_ in the case where you can't use hooks because you're rendering
 * something under another render prop component.
 */
export declare const WithMenuIconSize: React.FC<withMenuIconSizeProps>;
/**
 * Extract color from menu config context
 *
 * Uses a reasonable default as we don't require any consumer to use
 * `MenuConfigProvider`
 */
export declare function useMenuColor(): MenuConfig["color"];
/**
 * Extract `IconSize` from context
 *
 * Uses a reasonable default as we don't require any consumer to use
 * `IconSizeProvider`
 */
export declare function useMenuIconSize(): MenuConfig["iconSize"];
export {};
