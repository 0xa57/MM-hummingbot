'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var colors = require('./colors/colors.js');

/**
 * Context holding all configuration options for Menus
 */
var MenuConfigContext = React__default.createContext(undefined);
/**
 * Provider to set menu config on the context
 *
 * This value is immutable; it's defined when instantiated
 */
var MenuConfigProvider = function (_a) {
    var children = _a.children, iconSize = _a.iconSize, color = _a.color;
    return (React__default.createElement(MenuConfigContext.Provider, { value: {
            color: color,
            iconSize: iconSize,
        } }, children));
};
function useMenuConfig() {
    return React__default.useContext(MenuConfigContext);
}
/**
 * Extract color from menu config context
 *
 * Uses a reasonable default as we don't require any consumer to use
 * `MenuConfigProvider`
 */
function useMenuColor() {
    var _a, _b;
    return (_b = (_a = useMenuConfig()) === null || _a === void 0 ? void 0 : _a.color) !== null && _b !== void 0 ? _b : colors.colors.blue.base;
}
/**
 * Extract `IconSize` from context
 *
 * Uses a reasonable default as we don't require any consumer to use
 * `IconSizeProvider`
 */
function useMenuIconSize() {
    var _a, _b;
    return (_b = (_a = useMenuConfig()) === null || _a === void 0 ? void 0 : _a.iconSize) !== null && _b !== void 0 ? _b : "normal";
}

/* eslint-disable @typescript-eslint/no-empty-function */
var MenuItemClickListenerContext = React__default.createContext(undefined);
var MenuItemClickListenerProvider = function (_a) {
    var children = _a.children, onClick = _a.onClick;
    return (React__default.createElement(MenuItemClickListenerContext.Provider, { value: onClick }, children));
};
/**
 * Extract menu item click handler from context
 */
function useMenuItemClickListener() {
    var onClick = React__default.useContext(MenuItemClickListenerContext);
    return onClick;
}

exports.MenuConfigProvider = MenuConfigProvider;
exports.MenuItemClickListenerProvider = MenuItemClickListenerProvider;
exports.useMenuColor = useMenuColor;
exports.useMenuIconSize = useMenuIconSize;
exports.useMenuItemClickListener = useMenuItemClickListener;
//# sourceMappingURL=index-272aedc8.js.map
