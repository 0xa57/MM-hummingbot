{"version":3,"file":"index-272aedc8.js","sources":["src/MenuConfig/index.tsx","src/MenuItemClickListener/index.tsx"],"sourcesContent":["import React from \"react\";\nimport { colors, ShadedColor } from \"../colors\";\n\n/**\n * Enumeration of all icon sizes\n *\n * This uses string literals instead of a TypeScript union so we can use\n * strings, like `\"small\"`, for props instead of `IconSize.small`\n */\ntype IconSize = \"small\" | \"normal\";\n\ninterface MenuConfig {\n  /**\n   * Color of the menu. This will be used to programtically alter hover,\n   * selected, and text colors\n   *\n   * @default \"inherit\"\n   */\n  color: ShadedColor;\n\n  /**\n   * Icon size to use for all descendents\n   */\n  iconSize: IconSize;\n}\n\n/**\n * Context holding all configuration options for Menus\n */\nconst MenuConfigContext = React.createContext<Partial<MenuConfig> | undefined>(\n  undefined\n);\n\n/**\n * Provider to set menu config on the context\n *\n * This value is immutable; it's defined when instantiated\n */\nexport const MenuConfigProvider: React.FC<Partial<MenuConfig>> = ({\n  children,\n  iconSize,\n  color,\n}) => {\n  return (\n    <MenuConfigContext.Provider\n      value={{\n        color,\n        iconSize,\n      }}\n    >\n      {children}\n    </MenuConfigContext.Provider>\n  );\n};\n\ninterface withMenuIconSizeProps {\n  /**\n   * Render prop function. Calls the callback in the shape of\n   *\n   * ```jsx\n   * { iconSize: IconSize }\n   * ```\n   */\n  children: (\n    renderPropValues: Pick<MenuConfig, \"iconSize\">\n  ) => ReturnType<React.FC>;\n}\n\n/**\n * Extract `IconSize` from context.\n *\n * *Avoid this component.* Use `useMenuIconSize` instead. This is intended to be\n * used _only_ in the case where you can't use hooks because you're rendering\n * something under another render prop component.\n */\nexport const WithMenuIconSize: React.FC<withMenuIconSizeProps> = ({\n  children,\n}) => (\n  <MenuConfigContext.Consumer>\n    {(config) => children({ iconSize: config?.iconSize ?? \"normal\" })}\n  </MenuConfigContext.Consumer>\n);\n\nfunction useMenuConfig() {\n  return React.useContext(MenuConfigContext);\n}\n\n/**\n * Extract color from menu config context\n *\n * Uses a reasonable default as we don't require any consumer to use\n * `MenuConfigProvider`\n */\nexport function useMenuColor(): MenuConfig[\"color\"] {\n  return useMenuConfig()?.color ?? colors.blue.base;\n}\n\n/**\n * Extract `IconSize` from context\n *\n * Uses a reasonable default as we don't require any consumer to use\n * `IconSizeProvider`\n */\nexport function useMenuIconSize(): MenuConfig[\"iconSize\"] {\n  return useMenuConfig()?.iconSize ?? \"normal\";\n}\n","/* eslint-disable @typescript-eslint/no-empty-function */\nimport React from \"react\";\n\nconst MenuItemClickListenerContext = React.createContext<\n  React.MouseEventHandler | undefined\n>(undefined);\n\ninterface Props {\n  onClick: React.MouseEventHandler;\n}\n\nexport const MenuItemClickListenerProvider: React.FC<Props> = ({\n  children,\n  onClick,\n}) => {\n  return (\n    <MenuItemClickListenerContext.Provider value={onClick}>\n      {children}\n    </MenuItemClickListenerContext.Provider>\n  );\n};\n\ninterface withMenuItemClickListenerProps {\n  /**\n   * Render prop function. Calls the callback in the shape of `{ iconSize:\n   * IconSize }`\n   */\n  children: (renderPropValues: {\n    onClick: React.MouseEventHandler | undefined;\n  }) => ReturnType<React.FC>;\n}\n\n/**\n * Extract `IconSize` from context.\n *\n * *Avoid this component.* This is intended to be used _only_ in the case where\n * you can't use hooks because you're rendering something under another render\n * prop component.\n */\nexport const WithMenuIconSize: React.FC<withMenuItemClickListenerProps> = ({\n  children,\n}) => (\n  <MenuItemClickListenerContext.Consumer>\n    {(onClick) => children({ onClick })}\n  </MenuItemClickListenerContext.Consumer>\n);\n\n/**\n * Extract menu item click handler from context\n */\nexport function useMenuItemClickListener():\n  | React.MouseEventHandler\n  | undefined {\n  const onClick = React.useContext(MenuItemClickListenerContext);\n\n  return onClick;\n}\n"],"names":["React","colors"],"mappings":";;;;;;;;AA0BA;;;AAGA,IAAM,iBAAiB,GAAGA,cAAK,CAAC,aAAa,CAC3C,SAAS,CACV,CAAC;;;;;;AAOF,IAAa,kBAAkB,GAAkC,UAAC,EAIjE;QAHC,QAAQ,cAAA,EACR,QAAQ,cAAA,EACR,KAAK,WAAA;IAEL,QACEA,6BAAC,iBAAiB,CAAC,QAAQ,IACzB,KAAK,EAAE;YACL,KAAK,OAAA;YACL,QAAQ,UAAA;SACT,IAEA,QAAQ,CACkB,EAC7B;CACH,CAAC;AAeF,AAeA,SAAS,aAAa;IACpB,OAAOA,cAAK,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC;CAC5C;;;;;;;AAQD,SAAgB,YAAY;;IAC1B,mBAAO,aAAa,EAAE,0CAAE,KAAK,mCAAIC,aAAM,CAAC,IAAI,CAAC,IAAI,CAAC;CACnD;;;;;;;AAQD,SAAgB,eAAe;;IAC7B,mBAAO,aAAa,EAAE,0CAAE,QAAQ,mCAAI,QAAQ,CAAC;CAC9C;;ACzGD;AACA,AAEA,IAAM,4BAA4B,GAAGD,cAAK,CAAC,aAAa,CAEtD,SAAS,CAAC,CAAC;AAMb,IAAa,6BAA6B,GAAoB,UAAC,EAG9D;QAFC,QAAQ,cAAA,EACR,OAAO,aAAA;IAEP,QACEA,6BAAC,4BAA4B,CAAC,QAAQ,IAAC,KAAK,EAAE,OAAO,IAClD,QAAQ,CAC6B,EACxC;CACH,CAAC;AAYF,AAeA;;;AAGA,SAAgB,wBAAwB;IAGtC,IAAM,OAAO,GAAGA,cAAK,CAAC,UAAU,CAAC,4BAA4B,CAAC,CAAC;IAE/D,OAAO,OAAO,CAAC;CAChB;;;;;;;;"}