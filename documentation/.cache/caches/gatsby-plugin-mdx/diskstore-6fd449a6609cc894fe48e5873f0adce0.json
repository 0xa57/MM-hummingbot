{"expireTime":9007200881073061000,"key":"gatsby-plugin-mdx-entire-payload-31dd03eb12f33786e16795c63d799113-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import Callout from \"../../src/components/Callout\";","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":52,"offset":52},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Building Connectors","position":{"start":{"line":4,"column":4,"offset":57},"end":{"line":4,"column":23,"offset":76},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":54},"end":{"line":4,"column":23,"offset":76},"indent":[]}},{"type":"jsx","value":"<Callout\n  type=\"note\"\n  body=\"This [page] lists all relevant updates to Hummingbot codebase aimed to help connector developers in making the requisite changes to their connectors.\"\n  link={[\n    \"https://www.notion.so/hummingbot/a26c8bcf30284535b0e5689d45a4fe88?v=869e73f78f0b426288476a2abda20f2c\",\n  ]}\n/>","position":{"start":{"line":6,"column":1,"offset":78},"end":{"line":12,"column":3,"offset":385},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Each exchange connector is comprised of the following key functions:","position":{"start":{"line":14,"column":1,"offset":387},"end":{"line":14,"column":69,"offset":455},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":387},"end":{"line":14,"column":69,"offset":455},"indent":[]}},{"type":"table","align":[null,null],"children":[{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Functions","position":{"start":{"line":16,"column":3,"offset":459},"end":{"line":16,"column":12,"offset":468},"indent":[]}}],"position":{"start":{"line":16,"column":3,"offset":459},"end":{"line":16,"column":36,"offset":492},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Description","position":{"start":{"line":16,"column":39,"offset":495},"end":{"line":16,"column":50,"offset":506},"indent":[]}}],"position":{"start":{"line":16,"column":39,"offset":495},"end":{"line":16,"column":114,"offset":570},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":457},"end":{"line":16,"column":116,"offset":572},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"strong","children":[{"type":"text","value":"(1) Placing/Cancelling Orders","position":{"start":{"line":18,"column":5,"offset":693},"end":{"line":18,"column":34,"offset":722},"indent":[]}}],"position":{"start":{"line":18,"column":3,"offset":691},"end":{"line":18,"column":36,"offset":724},"indent":[]}}],"position":{"start":{"line":18,"column":3,"offset":691},"end":{"line":18,"column":36,"offset":724},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Sending buy/sell/cancel instructions to the exchange.","position":{"start":{"line":18,"column":39,"offset":727},"end":{"line":18,"column":92,"offset":780},"indent":[]}}],"position":{"start":{"line":18,"column":39,"offset":727},"end":{"line":18,"column":114,"offset":802},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":689},"end":{"line":18,"column":116,"offset":804},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"strong","children":[{"type":"text","value":"(2) Order book tracking","position":{"start":{"line":19,"column":5,"offset":809},"end":{"line":19,"column":28,"offset":832},"indent":[]}}],"position":{"start":{"line":19,"column":3,"offset":807},"end":{"line":19,"column":30,"offset":834},"indent":[]}}],"position":{"start":{"line":19,"column":3,"offset":807},"end":{"line":19,"column":36,"offset":840},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Tracking exchange's real-time order book data.","position":{"start":{"line":19,"column":39,"offset":843},"end":{"line":19,"column":85,"offset":889},"indent":[]}}],"position":{"start":{"line":19,"column":39,"offset":843},"end":{"line":19,"column":114,"offset":918},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":805},"end":{"line":19,"column":116,"offset":920},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"strong","children":[{"type":"text","value":"(3) Parsing order book data","position":{"start":{"line":20,"column":5,"offset":925},"end":{"line":20,"column":32,"offset":952},"indent":[]}}],"position":{"start":{"line":20,"column":3,"offset":923},"end":{"line":20,"column":34,"offset":954},"indent":[]}}],"position":{"start":{"line":20,"column":3,"offset":923},"end":{"line":20,"column":36,"offset":956},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Formatting raw order book data into the standard format used by Hummingbot.","position":{"start":{"line":20,"column":39,"offset":959},"end":{"line":20,"column":114,"offset":1034},"indent":[]}}],"position":{"start":{"line":20,"column":39,"offset":959},"end":{"line":20,"column":114,"offset":1034},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":921},"end":{"line":20,"column":116,"offset":1036},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"strong","children":[{"type":"text","value":"(4) Active order tracking","position":{"start":{"line":21,"column":5,"offset":1041},"end":{"line":21,"column":30,"offset":1066},"indent":[]}}],"position":{"start":{"line":21,"column":3,"offset":1039},"end":{"line":21,"column":32,"offset":1068},"indent":[]}}],"position":{"start":{"line":21,"column":3,"offset":1039},"end":{"line":21,"column":36,"offset":1072},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Tracking orders placed by the bot on the exchange.","position":{"start":{"line":21,"column":39,"offset":1075},"end":{"line":21,"column":89,"offset":1125},"indent":[]}}],"position":{"start":{"line":21,"column":39,"offset":1075},"end":{"line":21,"column":114,"offset":1150},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":1037},"end":{"line":21,"column":116,"offset":1152},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"strong","children":[{"type":"text","value":"(5) User stream tracker","position":{"start":{"line":22,"column":5,"offset":1157},"end":{"line":22,"column":28,"offset":1180},"indent":[]}}],"position":{"start":{"line":22,"column":3,"offset":1155},"end":{"line":22,"column":30,"offset":1182},"indent":[]}}],"position":{"start":{"line":22,"column":3,"offset":1155},"end":{"line":22,"column":36,"offset":1188},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Tracking user data specific to the current user of the bot.","position":{"start":{"line":22,"column":39,"offset":1191},"end":{"line":22,"column":98,"offset":1250},"indent":[]}}],"position":{"start":{"line":22,"column":39,"offset":1191},"end":{"line":22,"column":114,"offset":1266},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":1153},"end":{"line":22,"column":116,"offset":1268},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":457},"end":{"line":22,"column":116,"offset":1268},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Getting Started","position":{"start":{"line":24,"column":4,"offset":1273},"end":{"line":24,"column":19,"offset":1288},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":1270},"end":{"line":24,"column":19,"offset":1288},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This guide will help you learn about the basic structure of a connector in Hummingbot. Included in this guide is the scope of creating/modifying the necessary components to implement an exchange connector.","position":{"start":{"line":26,"column":1,"offset":1290},"end":{"line":26,"column":206,"offset":1495},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":1290},"end":{"line":26,"column":206,"offset":1495},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"By the end of this guide, you should:","position":{"start":{"line":28,"column":1,"offset":1497},"end":{"line":28,"column":38,"offset":1534},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":1497},"end":{"line":28,"column":38,"offset":1534},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Have a general understanding of the base classes that serve as building blocks of a connector","position":{"start":{"line":30,"column":3,"offset":1538},"end":{"line":30,"column":96,"offset":1631},"indent":[]}}],"position":{"start":{"line":30,"column":3,"offset":1538},"end":{"line":30,"column":96,"offset":1631},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":1536},"end":{"line":30,"column":96,"offset":1631},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Be able to integrate new connectors from scratch","position":{"start":{"line":31,"column":3,"offset":1634},"end":{"line":31,"column":51,"offset":1682},"indent":[]}}],"position":{"start":{"line":31,"column":3,"offset":1634},"end":{"line":31,"column":51,"offset":1682},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":1632},"end":{"line":31,"column":51,"offset":1682},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":1536},"end":{"line":31,"column":51,"offset":1682},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Implementing a new connector can generally be split into 3 major tasks:","position":{"start":{"line":33,"column":1,"offset":1684},"end":{"line":33,"column":72,"offset":1755},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":1684},"end":{"line":33,"column":72,"offset":1755},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Task 1:","position":{"start":{"line":35,"column":5,"offset":1761},"end":{"line":35,"column":12,"offset":1768},"indent":[]}}],"position":{"start":{"line":35,"column":3,"offset":1759},"end":{"line":35,"column":14,"offset":1770},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":35,"column":14,"offset":1770},"end":{"line":35,"column":15,"offset":1771},"indent":[]}},{"type":"link","title":null,"url":"task1","children":[{"type":"text","value":"OrderBookDataSource & OrderBookTracker","position":{"start":{"line":35,"column":16,"offset":1772},"end":{"line":35,"column":54,"offset":1810},"indent":[]}}],"position":{"start":{"line":35,"column":15,"offset":1771},"end":{"line":35,"column":62,"offset":1818},"indent":[]}}],"position":{"start":{"line":35,"column":3,"offset":1759},"end":{"line":35,"column":62,"offset":1818},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":1757},"end":{"line":35,"column":62,"offset":1818},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Task 2:","position":{"start":{"line":36,"column":5,"offset":1823},"end":{"line":36,"column":12,"offset":1830},"indent":[]}}],"position":{"start":{"line":36,"column":3,"offset":1821},"end":{"line":36,"column":14,"offset":1832},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":36,"column":14,"offset":1832},"end":{"line":36,"column":15,"offset":1833},"indent":[]}},{"type":"link","title":null,"url":"task2","children":[{"type":"text","value":"UserStreamDataSource, UserStreamTracker & Auth","position":{"start":{"line":36,"column":16,"offset":1834},"end":{"line":36,"column":62,"offset":1880},"indent":[]}}],"position":{"start":{"line":36,"column":15,"offset":1833},"end":{"line":36,"column":70,"offset":1888},"indent":[]}}],"position":{"start":{"line":36,"column":3,"offset":1821},"end":{"line":36,"column":70,"offset":1888},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":1819},"end":{"line":36,"column":70,"offset":1888},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Task 3:","position":{"start":{"line":37,"column":5,"offset":1893},"end":{"line":37,"column":12,"offset":1900},"indent":[]}}],"position":{"start":{"line":37,"column":3,"offset":1891},"end":{"line":37,"column":14,"offset":1902},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":37,"column":14,"offset":1902},"end":{"line":37,"column":15,"offset":1903},"indent":[]}},{"type":"link","title":null,"url":"task3","children":[{"type":"text","value":"Exchange Connector","position":{"start":{"line":37,"column":16,"offset":1904},"end":{"line":37,"column":34,"offset":1922},"indent":[]}}],"position":{"start":{"line":37,"column":15,"offset":1903},"end":{"line":37,"column":42,"offset":1930},"indent":[]}}],"position":{"start":{"line":37,"column":3,"offset":1891},"end":{"line":37,"column":42,"offset":1930},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":1889},"end":{"line":37,"column":42,"offset":1930},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":1757},"end":{"line":37,"column":42,"offset":1930},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Tasks and UML Diagram","position":{"start":{"line":39,"column":4,"offset":1935},"end":{"line":39,"column":25,"offset":1956},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":1932},"end":{"line":39,"column":25,"offset":1956},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The following diagram displays the tasks and their relevant classes as a checklist to get started.","position":{"start":{"line":41,"column":1,"offset":1958},"end":{"line":41,"column":99,"offset":2056},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":1958},"end":{"line":41,"column":99,"offset":2056},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"/img/connector-tutorial-uml.svg","alt":"connector tutorial UML","position":{"start":{"line":43,"column":1,"offset":2058},"end":{"line":43,"column":59,"offset":2116},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":2058},"end":{"line":43,"column":59,"offset":2116},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Order Lifecycle and Market Events","position":{"start":{"line":45,"column":4,"offset":2121},"end":{"line":45,"column":37,"offset":2154},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":2118},"end":{"line":45,"column":37,"offset":2154},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Exchange connectors track status updates of all orders created in Hummingbot and emit events on status updates of its orders for the strategy modules.\nBe careful when implementing a new exchange connector to ensure all the status updates and emitted events adhere to the semantics defined by Hummingbot.","position":{"start":{"line":47,"column":1,"offset":2156},"end":{"line":48,"column":153,"offset":2459},"indent":[1]}}],"position":{"start":{"line":47,"column":1,"offset":2156},"end":{"line":48,"column":153,"offset":2459},"indent":[1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Order Tracking","position":{"start":{"line":50,"column":5,"offset":2465},"end":{"line":50,"column":19,"offset":2479},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":2461},"end":{"line":50,"column":19,"offset":2479},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Order tracking starts when ","position":{"start":{"line":52,"column":1,"offset":2481},"end":{"line":52,"column":28,"offset":2508},"indent":[]}},{"type":"inlineCode","value":"_create_order()","position":{"start":{"line":52,"column":28,"offset":2508},"end":{"line":52,"column":45,"offset":2525},"indent":[]}},{"type":"text","value":" is called. It is called from within the ","position":{"start":{"line":52,"column":45,"offset":2525},"end":{"line":52,"column":86,"offset":2566},"indent":[]}},{"type":"inlineCode","value":"buy()","position":{"start":{"line":52,"column":86,"offset":2566},"end":{"line":52,"column":93,"offset":2573},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":52,"column":93,"offset":2573},"end":{"line":52,"column":98,"offset":2578},"indent":[]}},{"type":"inlineCode","value":"sell()","position":{"start":{"line":52,"column":98,"offset":2578},"end":{"line":52,"column":106,"offset":2586},"indent":[]}},{"type":"text","value":" functions.\nAn exchange connector should keep tracking the order's status and emit events for any change of states until the order is completed, cancelled, expired, or failed.","position":{"start":{"line":52,"column":106,"offset":2586},"end":{"line":53,"column":164,"offset":2761},"indent":[1]}}],"position":{"start":{"line":52,"column":1,"offset":2481},"end":{"line":53,"column":164,"offset":2761},"indent":[1]}},{"type":"jsx","value":"<Callout\n  type=\"note\"\n  body=\"This is done by calling #start_tracking_order()# method in the #Exchange# class. #start_tracking_order()# should be called before the API request for placing the order is executed.\"\n/>","position":{"start":{"line":55,"column":1,"offset":2763},"end":{"line":58,"column":3,"offset":2978},"indent":[1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Order Lifecycle Flowchart","position":{"start":{"line":60,"column":5,"offset":2984},"end":{"line":60,"column":30,"offset":3009},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":2980},"end":{"line":60,"column":30,"offset":3009},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"/img/connector-order-lifecycle.svg","alt":"Figure 1: Order lifecycle flowchart","position":{"start":{"line":62,"column":1,"offset":3011},"end":{"line":62,"column":75,"offset":3085},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":3011},"end":{"line":62,"column":75,"offset":3085},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Creating an Order","position":{"start":{"line":64,"column":5,"offset":3091},"end":{"line":64,"column":22,"offset":3108},"indent":[]}}],"position":{"start":{"line":64,"column":1,"offset":3087},"end":{"line":64,"column":22,"offset":3108},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"An order is created by invoking ","position":{"start":{"line":66,"column":1,"offset":3110},"end":{"line":66,"column":33,"offset":3142},"indent":[]}},{"type":"inlineCode","value":"buy()","position":{"start":{"line":66,"column":33,"offset":3142},"end":{"line":66,"column":40,"offset":3149},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":66,"column":40,"offset":3149},"end":{"line":66,"column":44,"offset":3153},"indent":[]}},{"type":"inlineCode","value":"sell()","position":{"start":{"line":66,"column":44,"offset":3153},"end":{"line":66,"column":52,"offset":3161},"indent":[]}},{"type":"text","value":" in an exchange connector - usually by a strategy module.\n","position":{"start":{"line":66,"column":52,"offset":3161},"end":{"line":67,"column":1,"offset":3219},"indent":[1]}},{"type":"inlineCode","value":"buy()","position":{"start":{"line":67,"column":1,"offset":3219},"end":{"line":67,"column":8,"offset":3226},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":67,"column":8,"offset":3226},"end":{"line":67,"column":13,"offset":3231},"indent":[]}},{"type":"inlineCode","value":"sell()","position":{"start":{"line":67,"column":13,"offset":3231},"end":{"line":67,"column":21,"offset":3239},"indent":[]}},{"type":"text","value":" would return immediately with a client-side order ID that Hummingbot uses to track the order's status.\nThey would schedule the order to be submitted to the exchange as soon as possible but would not wait for the reply from the exchange before returning.","position":{"start":{"line":67,"column":21,"offset":3239},"end":{"line":68,"column":151,"offset":3493},"indent":[1]}}],"position":{"start":{"line":66,"column":1,"offset":3110},"end":{"line":68,"column":151,"offset":3493},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Submitting an Order","position":{"start":{"line":70,"column":5,"offset":3499},"end":{"line":70,"column":24,"offset":3518},"indent":[]}}],"position":{"start":{"line":70,"column":1,"offset":3495},"end":{"line":70,"column":24,"offset":3518},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In most of our built-in exchange connectors, order submission occurs in the ","position":{"start":{"line":72,"column":1,"offset":3520},"end":{"line":72,"column":77,"offset":3596},"indent":[]}},{"type":"inlineCode","value":"_create_order()","position":{"start":{"line":72,"column":77,"offset":3596},"end":{"line":72,"column":94,"offset":3613},"indent":[]}},{"type":"text","value":" function - although it may be different for some decentralized exchange connectors.","position":{"start":{"line":72,"column":94,"offset":3613},"end":{"line":72,"column":178,"offset":3697},"indent":[]}}],"position":{"start":{"line":72,"column":1,"offset":3520},"end":{"line":72,"column":178,"offset":3697},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":74,"column":1,"offset":3699},"end":{"line":74,"column":5,"offset":3703},"indent":[]}},{"type":"inlineCode","value":"_create_order()","position":{"start":{"line":74,"column":5,"offset":3703},"end":{"line":74,"column":22,"offset":3720},"indent":[]}},{"type":"text","value":" method is responsible for performing the necessary trading rule checks before submitting the order via the REST API.\nUpon receiving a successful response, a ","position":{"start":{"line":74,"column":22,"offset":3720},"end":{"line":75,"column":41,"offset":3878},"indent":[1]}},{"type":"inlineCode","value":"BuyOrderCreatedEvent","position":{"start":{"line":75,"column":41,"offset":3878},"end":{"line":75,"column":63,"offset":3900},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":75,"column":63,"offset":3900},"end":{"line":75,"column":67,"offset":3904},"indent":[]}},{"type":"inlineCode","value":"SellOrderCreatedEvent","position":{"start":{"line":75,"column":67,"offset":3904},"end":{"line":75,"column":90,"offset":3927},"indent":[]}},{"type":"text","value":" would be emitted. Otherwise, a ","position":{"start":{"line":75,"column":90,"offset":3927},"end":{"line":75,"column":122,"offset":3959},"indent":[]}},{"type":"inlineCode","value":"MarketOrderFailureEvent","position":{"start":{"line":75,"column":122,"offset":3959},"end":{"line":75,"column":147,"offset":3984},"indent":[]}},{"type":"text","value":" would be emitted. Note that despite the naming, ","position":{"start":{"line":75,"column":147,"offset":3984},"end":{"line":75,"column":196,"offset":4033},"indent":[]}},{"type":"inlineCode","value":"MarketOrderFailureEvent","position":{"start":{"line":75,"column":196,"offset":4033},"end":{"line":75,"column":221,"offset":4058},"indent":[]}},{"type":"text","value":" is emitted even for limit orders.","position":{"start":{"line":75,"column":221,"offset":4058},"end":{"line":75,"column":255,"offset":4092},"indent":[]}}],"position":{"start":{"line":74,"column":1,"offset":3699},"end":{"line":75,"column":255,"offset":4092},"indent":[1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Order Being Filled","position":{"start":{"line":77,"column":5,"offset":4098},"end":{"line":77,"column":23,"offset":4116},"indent":[]}}],"position":{"start":{"line":77,"column":1,"offset":4094},"end":{"line":77,"column":23,"offset":4116},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Other market participants could fill an order over time once it's live on an exchange.\nDepending on the order types, i.e. limit or market, the order could be filled either immediately or after another market participant fulfils it.","position":{"start":{"line":79,"column":1,"offset":4118},"end":{"line":80,"column":145,"offset":4349},"indent":[1]}}],"position":{"start":{"line":79,"column":1,"offset":4118},"end":{"line":80,"column":145,"offset":4349},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"For every order fill on our orders, whether partially or entirely, the exchange connector must emit an ","position":{"start":{"line":82,"column":1,"offset":4351},"end":{"line":82,"column":104,"offset":4454},"indent":[]}},{"type":"inlineCode","value":"OrderFilledEvent","position":{"start":{"line":82,"column":104,"offset":4454},"end":{"line":82,"column":122,"offset":4472},"indent":[]}},{"type":"text","value":", to notify the strategy modules about the order's progress.","position":{"start":{"line":82,"column":122,"offset":4472},"end":{"line":82,"column":182,"offset":4532},"indent":[]}}],"position":{"start":{"line":82,"column":1,"offset":4351},"end":{"line":82,"column":182,"offset":4532},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Order Completion","position":{"start":{"line":84,"column":5,"offset":4538},"end":{"line":84,"column":21,"offset":4554},"indent":[]}}],"position":{"start":{"line":84,"column":1,"offset":4534},"end":{"line":84,"column":21,"offset":4554},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Once an order has been completely filled, the exchange connector must emit a ","position":{"start":{"line":86,"column":1,"offset":4556},"end":{"line":86,"column":78,"offset":4633},"indent":[]}},{"type":"inlineCode","value":"BuyOrderCompletedEvent","position":{"start":{"line":86,"column":78,"offset":4633},"end":{"line":86,"column":102,"offset":4657},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":86,"column":102,"offset":4657},"end":{"line":86,"column":106,"offset":4661},"indent":[]}},{"type":"inlineCode","value":"SellOrderCompletedEvent","position":{"start":{"line":86,"column":106,"offset":4661},"end":{"line":86,"column":131,"offset":4686},"indent":[]}},{"type":"text","value":".\nThe exchange connector would stop tracking the order afterward.","position":{"start":{"line":86,"column":131,"offset":4686},"end":{"line":87,"column":64,"offset":4751},"indent":[1]}}],"position":{"start":{"line":86,"column":1,"offset":4556},"end":{"line":87,"column":64,"offset":4751},"indent":[1]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"BuyOrderCompletedEvent","position":{"start":{"line":89,"column":1,"offset":4753},"end":{"line":89,"column":25,"offset":4777},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":89,"column":25,"offset":4777},"end":{"line":89,"column":29,"offset":4781},"indent":[]}},{"type":"inlineCode","value":"SellOrderCompletedEvent","position":{"start":{"line":89,"column":29,"offset":4781},"end":{"line":89,"column":54,"offset":4806},"indent":[]}},{"type":"text","value":" should always come ","position":{"start":{"line":89,"column":54,"offset":4806},"end":{"line":89,"column":74,"offset":4826},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"after","position":{"start":{"line":89,"column":76,"offset":4828},"end":{"line":89,"column":81,"offset":4833},"indent":[]}}],"position":{"start":{"line":89,"column":74,"offset":4826},"end":{"line":89,"column":83,"offset":4835},"indent":[]}},{"type":"text","value":" an ","position":{"start":{"line":89,"column":83,"offset":4835},"end":{"line":89,"column":87,"offset":4839},"indent":[]}},{"type":"inlineCode","value":"OrderFilledEvent","position":{"start":{"line":89,"column":87,"offset":4839},"end":{"line":89,"column":105,"offset":4857},"indent":[]}},{"type":"text","value":" has been emitted.","position":{"start":{"line":89,"column":105,"offset":4857},"end":{"line":89,"column":123,"offset":4875},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":4753},"end":{"line":89,"column":123,"offset":4875},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Order Cancellation or Expiry","position":{"start":{"line":91,"column":5,"offset":4881},"end":{"line":91,"column":33,"offset":4909},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":4877},"end":{"line":91,"column":33,"offset":4909},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If an order is canceled or expired before it has been completely filled, an ","position":{"start":{"line":93,"column":1,"offset":4911},"end":{"line":93,"column":77,"offset":4987},"indent":[]}},{"type":"inlineCode","value":"OrderCancelledEvent","position":{"start":{"line":93,"column":77,"offset":4987},"end":{"line":93,"column":98,"offset":5008},"indent":[]}},{"type":"text","value":" or an ","position":{"start":{"line":93,"column":98,"offset":5008},"end":{"line":93,"column":105,"offset":5015},"indent":[]}},{"type":"inlineCode","value":"OrderExpiredEvent","position":{"start":{"line":93,"column":105,"offset":5015},"end":{"line":93,"column":124,"offset":5034},"indent":[]}},{"type":"text","value":" should be emitted.","position":{"start":{"line":93,"column":124,"offset":5034},"end":{"line":93,"column":143,"offset":5053},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":4911},"end":{"line":93,"column":143,"offset":5053},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For centralized exchanges, order tracking should end after emitting an ","position":{"start":{"line":95,"column":1,"offset":5055},"end":{"line":95,"column":72,"offset":5126},"indent":[]}},{"type":"inlineCode","value":"OrderCancelledEvent","position":{"start":{"line":95,"column":72,"offset":5126},"end":{"line":95,"column":93,"offset":5147},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":95,"column":93,"offset":5147},"end":{"line":95,"column":97,"offset":5151},"indent":[]}},{"type":"inlineCode","value":"OrderExpiredEvent","position":{"start":{"line":95,"column":97,"offset":5151},"end":{"line":95,"column":116,"offset":5170},"indent":[]}},{"type":"text","value":".\nOn decentralized exchanges - since it's possible for orders to be filled after cancellation or even expiry, due to block delays - the exchange connector may keep tracking the order for a certain amount of time afterwards.","position":{"start":{"line":95,"column":116,"offset":5170},"end":{"line":96,"column":222,"offset":5393},"indent":[1]}}],"position":{"start":{"line":95,"column":1,"offset":5055},"end":{"line":96,"column":222,"offset":5393},"indent":[1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Order Failure","position":{"start":{"line":98,"column":5,"offset":5399},"end":{"line":98,"column":18,"offset":5412},"indent":[]}}],"position":{"start":{"line":98,"column":1,"offset":5395},"end":{"line":98,"column":18,"offset":5412},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If a failed order has been rejected for any reason other than cancellation or expiry, ","position":{"start":{"line":100,"column":1,"offset":5414},"end":{"line":100,"column":87,"offset":5500},"indent":[]}},{"type":"inlineCode","value":"MarketOrderFailureEvent","position":{"start":{"line":100,"column":87,"offset":5500},"end":{"line":100,"column":112,"offset":5525},"indent":[]}},{"type":"text","value":" must be emitted.","position":{"start":{"line":100,"column":112,"offset":5525},"end":{"line":100,"column":129,"offset":5542},"indent":[]}}],"position":{"start":{"line":100,"column":1,"offset":5414},"end":{"line":100,"column":129,"offset":5542},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"InFlightOrder Helper","position":{"start":{"line":102,"column":4,"offset":5547},"end":{"line":102,"column":24,"offset":5567},"indent":[]}}],"position":{"start":{"line":102,"column":1,"offset":5544},"end":{"line":102,"column":24,"offset":5567},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Hummingbot comes with a built-in helper class for exchange connectors to track their order status, the ","position":{"start":{"line":104,"column":1,"offset":5569},"end":{"line":104,"column":104,"offset":5672},"indent":[]}},{"type":"inlineCode","value":"InFlightOrderBase","position":{"start":{"line":104,"column":104,"offset":5672},"end":{"line":104,"column":123,"offset":5691},"indent":[]}},{"type":"text","value":" class.","position":{"start":{"line":104,"column":123,"offset":5691},"end":{"line":104,"column":130,"offset":5698},"indent":[]}}],"position":{"start":{"line":104,"column":1,"offset":5569},"end":{"line":104,"column":130,"offset":5698},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"/img/connector-in-flight-uml.svg","alt":"Figure 2: InFlightOrderBase class","position":{"start":{"line":106,"column":1,"offset":5700},"end":{"line":106,"column":71,"offset":5770},"indent":[]}}],"position":{"start":{"line":106,"column":1,"offset":5700},"end":{"line":106,"column":71,"offset":5770},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"While developers are free to extend or modify from ","position":{"start":{"line":108,"column":1,"offset":5772},"end":{"line":108,"column":52,"offset":5823},"indent":[]}},{"type":"inlineCode","value":"InFlightOrderBase","position":{"start":{"line":108,"column":52,"offset":5823},"end":{"line":108,"column":71,"offset":5842},"indent":[]}},{"type":"text","value":" to suit their logic. There are a few conventions within Hummingbot's built-in exchange connectors for extending ","position":{"start":{"line":108,"column":71,"offset":5842},"end":{"line":108,"column":184,"offset":5955},"indent":[]}},{"type":"inlineCode","value":"InFlightOrderBase","position":{"start":{"line":108,"column":184,"offset":5955},"end":{"line":108,"column":203,"offset":5974},"indent":[]}},{"type":"text","value":",\nand it is recommended that new exchange connectors should stick with the same conventions.","position":{"start":{"line":108,"column":203,"offset":5974},"end":{"line":109,"column":91,"offset":6066},"indent":[1]}}],"position":{"start":{"line":108,"column":1,"offset":5772},"end":{"line":109,"column":91,"offset":6066},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Below are some of the functions that are required to be implemented in the new exchange connector.","position":{"start":{"line":111,"column":1,"offset":6068},"end":{"line":111,"column":99,"offset":6166},"indent":[]}}],"position":{"start":{"line":111,"column":1,"offset":6068},"end":{"line":111,"column":99,"offset":6166},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"is_done: bool","position":{"start":{"line":113,"column":3,"offset":6170},"end":{"line":113,"column":18,"offset":6185},"indent":[]}}],"position":{"start":{"line":113,"column":3,"offset":6170},"end":{"line":113,"column":18,"offset":6185},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This property indicates whether the order is done or not, whether it has been filled or failed, canceled or expired.","position":{"start":{"line":115,"column":3,"offset":6189},"end":{"line":115,"column":119,"offset":6305},"indent":[]}}],"position":{"start":{"line":115,"column":3,"offset":6189},"end":{"line":115,"column":119,"offset":6305},"indent":[]}}],"position":{"start":{"line":113,"column":1,"offset":6168},"end":{"line":116,"column":1,"offset":6306},"indent":[1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"is_cancelled: bool","position":{"start":{"line":117,"column":3,"offset":6309},"end":{"line":117,"column":23,"offset":6329},"indent":[]}}],"position":{"start":{"line":117,"column":3,"offset":6309},"end":{"line":117,"column":23,"offset":6329},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This property indicates whether the order has been canceled or not.","position":{"start":{"line":119,"column":3,"offset":6333},"end":{"line":119,"column":70,"offset":6400},"indent":[]}}],"position":{"start":{"line":119,"column":3,"offset":6333},"end":{"line":119,"column":70,"offset":6400},"indent":[]}}],"position":{"start":{"line":117,"column":1,"offset":6307},"end":{"line":120,"column":1,"offset":6401},"indent":[1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"is_failure: bool","position":{"start":{"line":121,"column":3,"offset":6404},"end":{"line":121,"column":21,"offset":6422},"indent":[]}}],"position":{"start":{"line":121,"column":3,"offset":6404},"end":{"line":121,"column":21,"offset":6422},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This property indicates whether the order has been terminated before completion or not. This includes all cases like order cancellation, expiry, or rejection.","position":{"start":{"line":123,"column":3,"offset":6426},"end":{"line":123,"column":161,"offset":6584},"indent":[]}}],"position":{"start":{"line":123,"column":3,"offset":6426},"end":{"line":123,"column":161,"offset":6584},"indent":[]}}],"position":{"start":{"line":121,"column":1,"offset":6402},"end":{"line":124,"column":1,"offset":6585},"indent":[1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"base_asset: str","position":{"start":{"line":125,"column":3,"offset":6588},"end":{"line":125,"column":20,"offset":6605},"indent":[]}}],"position":{"start":{"line":125,"column":3,"offset":6588},"end":{"line":125,"column":20,"offset":6605},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The base asset symbol.","position":{"start":{"line":127,"column":3,"offset":6609},"end":{"line":127,"column":25,"offset":6631},"indent":[]}}],"position":{"start":{"line":127,"column":3,"offset":6609},"end":{"line":127,"column":25,"offset":6631},"indent":[]}}],"position":{"start":{"line":125,"column":1,"offset":6586},"end":{"line":128,"column":1,"offset":6632},"indent":[1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"quote_asset: str","position":{"start":{"line":129,"column":3,"offset":6635},"end":{"line":129,"column":21,"offset":6653},"indent":[]}}],"position":{"start":{"line":129,"column":3,"offset":6635},"end":{"line":129,"column":21,"offset":6653},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The quote asset symbol.","position":{"start":{"line":131,"column":3,"offset":6657},"end":{"line":131,"column":26,"offset":6680},"indent":[]}}],"position":{"start":{"line":131,"column":3,"offset":6657},"end":{"line":131,"column":26,"offset":6680},"indent":[]}}],"position":{"start":{"line":129,"column":1,"offset":6633},"end":{"line":132,"column":1,"offset":6681},"indent":[1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"update_exchange_order_id(str): void","position":{"start":{"line":133,"column":3,"offset":6684},"end":{"line":133,"column":40,"offset":6721},"indent":[]}}],"position":{"start":{"line":133,"column":3,"offset":6684},"end":{"line":133,"column":40,"offset":6721},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is called when the market connector has successfully submitted the order to the exchange and has got back an exchange-native order ID. This notifies any coroutines waiting on the ","position":{"start":{"line":135,"column":3,"offset":6725},"end":{"line":135,"column":187,"offset":6909},"indent":[]}},{"type":"inlineCode","value":"get_exchange_order_id()","position":{"start":{"line":135,"column":187,"offset":6909},"end":{"line":135,"column":212,"offset":6934},"indent":[]}},{"type":"text","value":" function (detailed below","position":{"start":{"line":135,"column":212,"offset":6934},"end":{"line":135,"column":237,"offset":6959},"indent":[]}},{"type":"text","value":")","position":{"start":{"line":135,"column":237,"offset":6959},"end":{"line":135,"column":239,"offset":6961},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":135,"column":239,"offset":6961},"end":{"line":135,"column":240,"offset":6962},"indent":[]}}],"position":{"start":{"line":135,"column":3,"offset":6725},"end":{"line":135,"column":240,"offset":6962},"indent":[]}}],"position":{"start":{"line":133,"column":1,"offset":6682},"end":{"line":136,"column":1,"offset":6963},"indent":[1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"async get_exchange_order_id(): str","position":{"start":{"line":137,"column":3,"offset":6966},"end":{"line":137,"column":39,"offset":7002},"indent":[]}}],"position":{"start":{"line":137,"column":3,"offset":6966},"end":{"line":137,"column":39,"offset":7002},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Returns the exchange-native order ID for the order if the order has been submitted and the exchange-native order ID is known.\nOtherwise, it would wait until ","position":{"start":{"line":139,"column":3,"offset":7006},"end":{"line":140,"column":34,"offset":7165},"indent":[3]}},{"type":"inlineCode","value":"update_exchange_order_id(str)","position":{"start":{"line":140,"column":34,"offset":7165},"end":{"line":140,"column":65,"offset":7196},"indent":[]}},{"type":"text","value":" is called by the market connector.","position":{"start":{"line":140,"column":65,"offset":7196},"end":{"line":140,"column":100,"offset":7231},"indent":[]}}],"position":{"start":{"line":139,"column":3,"offset":7006},"end":{"line":140,"column":100,"offset":7231},"indent":[3]}}],"position":{"start":{"line":137,"column":1,"offset":6964},"end":{"line":141,"column":1,"offset":7232},"indent":[1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"to_limit_order(): LimitOrder","position":{"start":{"line":142,"column":3,"offset":7235},"end":{"line":142,"column":33,"offset":7265},"indent":[]}}],"position":{"start":{"line":142,"column":3,"offset":7235},"end":{"line":142,"column":33,"offset":7265},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Converts the in-flight order data structure to a ","position":{"start":{"line":144,"column":3,"offset":7269},"end":{"line":144,"column":52,"offset":7318},"indent":[]}},{"type":"inlineCode","value":"LimitOrder","position":{"start":{"line":144,"column":52,"offset":7318},"end":{"line":144,"column":64,"offset":7330},"indent":[]}},{"type":"text","value":" data object. This should only be used on limit orders.","position":{"start":{"line":144,"column":64,"offset":7330},"end":{"line":144,"column":119,"offset":7385},"indent":[]}}],"position":{"start":{"line":144,"column":3,"offset":7269},"end":{"line":144,"column":119,"offset":7385},"indent":[]}}],"position":{"start":{"line":142,"column":1,"offset":7233},"end":{"line":145,"column":1,"offset":7386},"indent":[1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"to_json(): Dict[str, any]","position":{"start":{"line":146,"column":3,"offset":7389},"end":{"line":146,"column":30,"offset":7416},"indent":[]}}],"position":{"start":{"line":146,"column":3,"offset":7389},"end":{"line":146,"column":30,"offset":7416},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Convert the in-flight order data structure to a dictionary that can be serialized into JSON format.","position":{"start":{"line":148,"column":3,"offset":7420},"end":{"line":148,"column":102,"offset":7519},"indent":[]}}],"position":{"start":{"line":148,"column":3,"offset":7420},"end":{"line":148,"column":102,"offset":7519},"indent":[]}}],"position":{"start":{"line":146,"column":1,"offset":7387},"end":{"line":149,"column":1,"offset":7520},"indent":[1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"from_json(): Dict[str, Any]","position":{"start":{"line":150,"column":3,"offset":7523},"end":{"line":150,"column":32,"offset":7552},"indent":[]}}],"position":{"start":{"line":150,"column":3,"offset":7523},"end":{"line":150,"column":32,"offset":7552},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Convert a dictionary object containing the relevant order details into an ","position":{"start":{"line":152,"column":3,"offset":7556},"end":{"line":152,"column":77,"offset":7630},"indent":[]}},{"type":"inlineCode","value":"InFlightOrder","position":{"start":{"line":152,"column":77,"offset":7630},"end":{"line":152,"column":92,"offset":7645},"indent":[]}},{"type":"text","value":" data structure.","position":{"start":{"line":152,"column":92,"offset":7645},"end":{"line":152,"column":108,"offset":7661},"indent":[]}}],"position":{"start":{"line":152,"column":3,"offset":7556},"end":{"line":152,"column":108,"offset":7661},"indent":[]}}],"position":{"start":{"line":150,"column":1,"offset":7521},"end":{"line":152,"column":108,"offset":7661},"indent":[1,1]}}],"position":{"start":{"line":113,"column":1,"offset":6168},"end":{"line":152,"column":108,"offset":7661},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Exchange Connector Developer Tutorial\",\"description\":\"Info on developing an exchange connector\"}","position":{"start":{"line":155,"column":1,"offset":7664},"end":{"line":155,"column":135,"offset":7798},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":155,"column":135,"offset":7798}}},"scopeImports":["import Callout from \"../../src/components/Callout\";","import * as React from 'react'"],"scopeIdentifiers":["Callout","React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Exchange Connector Developer Tutorial\",\n  \"description\": \"Info on developing an exchange connector\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"building-connectors\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#building-connectors\",\n    \"aria-label\": \"building connectors permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Building Connectors\"), mdx(Callout, {\n    type: \"note\",\n    body: \"This [page] lists all relevant updates to Hummingbot codebase aimed to help connector developers in making the requisite changes to their connectors.\",\n    link: [\"https://www.notion.so/hummingbot/a26c8bcf30284535b0e5689d45a4fe88?v=869e73f78f0b426288476a2abda20f2c\"],\n    mdxType: \"Callout\"\n  }), mdx(\"p\", null, \"Each exchange connector is comprised of the following key functions:\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Functions\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"(1) Placing/Cancelling Orders\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Sending buy/sell/cancel instructions to the exchange.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"(2) Order book tracking\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Tracking exchange's real-time order book data.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"(3) Parsing order book data\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Formatting raw order book data into the standard format used by Hummingbot.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"(4) Active order tracking\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Tracking orders placed by the bot on the exchange.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"(5) User stream tracker\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Tracking user data specific to the current user of the bot.\")))), mdx(\"h2\", {\n    \"id\": \"getting-started\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#getting-started\",\n    \"aria-label\": \"getting started permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Getting Started\"), mdx(\"p\", null, \"This guide will help you learn about the basic structure of a connector in Hummingbot. Included in this guide is the scope of creating/modifying the necessary components to implement an exchange connector.\"), mdx(\"p\", null, \"By the end of this guide, you should:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Have a general understanding of the base classes that serve as building blocks of a connector\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Be able to integrate new connectors from scratch\")), mdx(\"p\", null, \"Implementing a new connector can generally be split into 3 major tasks:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Task 1:\"), \" \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/developer/task1/\"\n  }), \"OrderBookDataSource & OrderBookTracker\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Task 2:\"), \" \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/developer/task2/\"\n  }), \"UserStreamDataSource, UserStreamTracker & Auth\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Task 3:\"), \" \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/developer/task3/\"\n  }), \"Exchange Connector\"))), mdx(\"h2\", {\n    \"id\": \"tasks-and-uml-diagram\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#tasks-and-uml-diagram\",\n    \"aria-label\": \"tasks and uml diagram permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Tasks and UML Diagram\"), mdx(\"p\", null, \"The following diagram displays the tasks and their relevant classes as a checklist to get started.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/9f48a3074192d8773593f8257794e908/connector-tutorial-uml.svg\",\n    \"alt\": \"connector tutorial UML\"\n  }))), mdx(\"h2\", {\n    \"id\": \"order-lifecycle-and-market-events\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#order-lifecycle-and-market-events\",\n    \"aria-label\": \"order lifecycle and market events permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Order Lifecycle and Market Events\"), mdx(\"p\", null, \"Exchange connectors track status updates of all orders created in Hummingbot and emit events on status updates of its orders for the strategy modules.\\nBe careful when implementing a new exchange connector to ensure all the status updates and emitted events adhere to the semantics defined by Hummingbot.\"), mdx(\"h3\", {\n    \"id\": \"order-tracking\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#order-tracking\",\n    \"aria-label\": \"order tracking permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Order Tracking\"), mdx(\"p\", null, \"Order tracking starts when \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"_create_order()\"), \" is called. It is called from within the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"buy()\"), \" and \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"sell()\"), \" functions.\\nAn exchange connector should keep tracking the order's status and emit events for any change of states until the order is completed, cancelled, expired, or failed.\"), mdx(Callout, {\n    type: \"note\",\n    body: \"This is done by calling #start_tracking_order()# method in the #Exchange# class. #start_tracking_order()# should be called before the API request for placing the order is executed.\",\n    mdxType: \"Callout\"\n  }), mdx(\"h3\", {\n    \"id\": \"order-lifecycle-flowchart\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#order-lifecycle-flowchart\",\n    \"aria-label\": \"order lifecycle flowchart permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Order Lifecycle Flowchart\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/116ffd6bd2ba7312241575208e23dd3a/connector-order-lifecycle.svg\",\n    \"alt\": \"Figure 1: Order lifecycle flowchart\"\n  }))), mdx(\"h3\", {\n    \"id\": \"creating-an-order\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#creating-an-order\",\n    \"aria-label\": \"creating an order permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Creating an Order\"), mdx(\"p\", null, \"An order is created by invoking \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"buy()\"), \" or \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"sell()\"), \" in an exchange connector - usually by a strategy module.\\n\", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"buy()\"), \" and \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"sell()\"), \" would return immediately with a client-side order ID that Hummingbot uses to track the order's status.\\nThey would schedule the order to be submitted to the exchange as soon as possible but would not wait for the reply from the exchange before returning.\"), mdx(\"h3\", {\n    \"id\": \"submitting-an-order\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#submitting-an-order\",\n    \"aria-label\": \"submitting an order permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Submitting an Order\"), mdx(\"p\", null, \"In most of our built-in exchange connectors, order submission occurs in the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"_create_order()\"), \" function - although it may be different for some decentralized exchange connectors.\"), mdx(\"p\", null, \"The \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"_create_order()\"), \" method is responsible for performing the necessary trading rule checks before submitting the order via the REST API.\\nUpon receiving a successful response, a \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"BuyOrderCreatedEvent\"), \" or \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"SellOrderCreatedEvent\"), \" would be emitted. Otherwise, a \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"MarketOrderFailureEvent\"), \" would be emitted. Note that despite the naming, \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"MarketOrderFailureEvent\"), \" is emitted even for limit orders.\"), mdx(\"h3\", {\n    \"id\": \"order-being-filled\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#order-being-filled\",\n    \"aria-label\": \"order being filled permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Order Being Filled\"), mdx(\"p\", null, \"Other market participants could fill an order over time once it's live on an exchange.\\nDepending on the order types, i.e. limit or market, the order could be filled either immediately or after another market participant fulfils it.\"), mdx(\"p\", null, \"For every order fill on our orders, whether partially or entirely, the exchange connector must emit an \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"OrderFilledEvent\"), \", to notify the strategy modules about the order's progress.\"), mdx(\"h3\", {\n    \"id\": \"order-completion\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#order-completion\",\n    \"aria-label\": \"order completion permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Order Completion\"), mdx(\"p\", null, \"Once an order has been completely filled, the exchange connector must emit a \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"BuyOrderCompletedEvent\"), \" or \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"SellOrderCompletedEvent\"), \".\\nThe exchange connector would stop tracking the order afterward.\"), mdx(\"p\", null, mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"BuyOrderCompletedEvent\"), \" or \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"SellOrderCompletedEvent\"), \" should always come \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"after\"), \" an \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"OrderFilledEvent\"), \" has been emitted.\"), mdx(\"h3\", {\n    \"id\": \"order-cancellation-or-expiry\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#order-cancellation-or-expiry\",\n    \"aria-label\": \"order cancellation or expiry permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Order Cancellation or Expiry\"), mdx(\"p\", null, \"If an order is canceled or expired before it has been completely filled, an \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"OrderCancelledEvent\"), \" or an \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"OrderExpiredEvent\"), \" should be emitted.\"), mdx(\"p\", null, \"For centralized exchanges, order tracking should end after emitting an \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"OrderCancelledEvent\"), \" or \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"OrderExpiredEvent\"), \".\\nOn decentralized exchanges - since it's possible for orders to be filled after cancellation or even expiry, due to block delays - the exchange connector may keep tracking the order for a certain amount of time afterwards.\"), mdx(\"h3\", {\n    \"id\": \"order-failure\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#order-failure\",\n    \"aria-label\": \"order failure permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Order Failure\"), mdx(\"p\", null, \"If a failed order has been rejected for any reason other than cancellation or expiry, \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"MarketOrderFailureEvent\"), \" must be emitted.\"), mdx(\"h2\", {\n    \"id\": \"inflightorder-helper\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#inflightorder-helper\",\n    \"aria-label\": \"inflightorder helper permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"InFlightOrder Helper\"), mdx(\"p\", null, \"Hummingbot comes with a built-in helper class for exchange connectors to track their order status, the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"InFlightOrderBase\"), \" class.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/378a505d560fc4f819704527084ed17b/connector-in-flight-uml.svg\",\n    \"alt\": \"Figure 2: InFlightOrderBase class\"\n  }))), mdx(\"p\", null, \"While developers are free to extend or modify from \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"InFlightOrderBase\"), \" to suit their logic. There are a few conventions within Hummingbot's built-in exchange connectors for extending \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"InFlightOrderBase\"), \",\\nand it is recommended that new exchange connectors should stick with the same conventions.\"), mdx(\"p\", null, \"Below are some of the functions that are required to be implemented in the new exchange connector.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"is_done: bool\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"This property indicates whether the order is done or not, whether it has been filled or failed, canceled or expired.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"is_cancelled: bool\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"This property indicates whether the order has been canceled or not.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"is_failure: bool\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"This property indicates whether the order has been terminated before completion or not. This includes all cases like order cancellation, expiry, or rejection.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"base_asset: str\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The base asset symbol.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"quote_asset: str\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The quote asset symbol.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"update_exchange_order_id(str): void\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"This is called when the market connector has successfully submitted the order to the exchange and has got back an exchange-native order ID. This notifies any coroutines waiting on the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"get_exchange_order_id()\"), \" function (detailed below\", \")\", \".\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"async get_exchange_order_id(): str\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Returns the exchange-native order ID for the order if the order has been submitted and the exchange-native order ID is known.\\nOtherwise, it would wait until \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"update_exchange_order_id(str)\"), \" is called by the market connector.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"to_limit_order(): LimitOrder\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Converts the in-flight order data structure to a \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"LimitOrder\"), \" data object. This should only be used on limit orders.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"to_json(): Dict[str, any]\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Convert the in-flight order data structure to a dictionary that can be serialized into JSON format.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"from_json(): Dict[str, Any]\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Convert a dictionary object containing the relevant order details into an \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"InFlightOrder\"), \" data structure.\"))));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport Callout from \"../../src/components/Callout\";\nexport const _frontmatter = {\n  \"title\": \"Exchange Connector Developer Tutorial\",\n  \"description\": \"Info on developing an exchange connector\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h2 {...{\n      \"id\": \"building-connectors\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#building-connectors\",\n        \"aria-label\": \"building connectors permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Building Connectors`}</h2>\n    <Callout type=\"note\" body=\"This [page] lists all relevant updates to Hummingbot codebase aimed to help connector developers in making the requisite changes to their connectors.\" link={[\"https://www.notion.so/hummingbot/a26c8bcf30284535b0e5689d45a4fe88?v=869e73f78f0b426288476a2abda20f2c\"]} mdxType=\"Callout\" />\n    <p>{`Each exchange connector is comprised of the following key functions:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Functions`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><strong parentName=\"td\">{`(1) Placing/Cancelling Orders`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Sending buy/sell/cancel instructions to the exchange.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><strong parentName=\"td\">{`(2) Order book tracking`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Tracking exchange's real-time order book data.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><strong parentName=\"td\">{`(3) Parsing order book data`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Formatting raw order book data into the standard format used by Hummingbot.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><strong parentName=\"td\">{`(4) Active order tracking`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Tracking orders placed by the bot on the exchange.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><strong parentName=\"td\">{`(5) User stream tracker`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Tracking user data specific to the current user of the bot.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"getting-started\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#getting-started\",\n        \"aria-label\": \"getting started permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Getting Started`}</h2>\n    <p>{`This guide will help you learn about the basic structure of a connector in Hummingbot. Included in this guide is the scope of creating/modifying the necessary components to implement an exchange connector.`}</p>\n    <p>{`By the end of this guide, you should:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Have a general understanding of the base classes that serve as building blocks of a connector`}</li>\n      <li parentName=\"ul\">{`Be able to integrate new connectors from scratch`}</li>\n    </ul>\n    <p>{`Implementing a new connector can generally be split into 3 major tasks:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Task 1:`}</strong>{` `}<a parentName=\"li\" {...{\n          \"href\": \"/developer/task1/\"\n        }}>{`OrderBookDataSource & OrderBookTracker`}</a></li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Task 2:`}</strong>{` `}<a parentName=\"li\" {...{\n          \"href\": \"/developer/task2/\"\n        }}>{`UserStreamDataSource, UserStreamTracker & Auth`}</a></li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Task 3:`}</strong>{` `}<a parentName=\"li\" {...{\n          \"href\": \"/developer/task3/\"\n        }}>{`Exchange Connector`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"tasks-and-uml-diagram\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#tasks-and-uml-diagram\",\n        \"aria-label\": \"tasks and uml diagram permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Tasks and UML Diagram`}</h2>\n    <p>{`The following diagram displays the tasks and their relevant classes as a checklist to get started.`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/9f48a3074192d8773593f8257794e908/connector-tutorial-uml.svg\",\n        \"alt\": \"connector tutorial UML\"\n      }}></img></p>\n    <h2 {...{\n      \"id\": \"order-lifecycle-and-market-events\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#order-lifecycle-and-market-events\",\n        \"aria-label\": \"order lifecycle and market events permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Order Lifecycle and Market Events`}</h2>\n    <p>{`Exchange connectors track status updates of all orders created in Hummingbot and emit events on status updates of its orders for the strategy modules.\nBe careful when implementing a new exchange connector to ensure all the status updates and emitted events adhere to the semantics defined by Hummingbot.`}</p>\n    <h3 {...{\n      \"id\": \"order-tracking\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h3\" {...{\n        \"href\": \"#order-tracking\",\n        \"aria-label\": \"order tracking permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Order Tracking`}</h3>\n    <p>{`Order tracking starts when `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`_create_order()`}</code>{` is called. It is called from within the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`buy()`}</code>{` and `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`sell()`}</code>{` functions.\nAn exchange connector should keep tracking the order's status and emit events for any change of states until the order is completed, cancelled, expired, or failed.`}</p>\n    <Callout type=\"note\" body=\"This is done by calling #start_tracking_order()# method in the #Exchange# class. #start_tracking_order()# should be called before the API request for placing the order is executed.\" mdxType=\"Callout\" />\n    <h3 {...{\n      \"id\": \"order-lifecycle-flowchart\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h3\" {...{\n        \"href\": \"#order-lifecycle-flowchart\",\n        \"aria-label\": \"order lifecycle flowchart permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Order Lifecycle Flowchart`}</h3>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/116ffd6bd2ba7312241575208e23dd3a/connector-order-lifecycle.svg\",\n        \"alt\": \"Figure 1: Order lifecycle flowchart\"\n      }}></img></p>\n    <h3 {...{\n      \"id\": \"creating-an-order\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h3\" {...{\n        \"href\": \"#creating-an-order\",\n        \"aria-label\": \"creating an order permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Creating an Order`}</h3>\n    <p>{`An order is created by invoking `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`buy()`}</code>{` or `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`sell()`}</code>{` in an exchange connector - usually by a strategy module.\n`}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`buy()`}</code>{` and `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`sell()`}</code>{` would return immediately with a client-side order ID that Hummingbot uses to track the order's status.\nThey would schedule the order to be submitted to the exchange as soon as possible but would not wait for the reply from the exchange before returning.`}</p>\n    <h3 {...{\n      \"id\": \"submitting-an-order\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h3\" {...{\n        \"href\": \"#submitting-an-order\",\n        \"aria-label\": \"submitting an order permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Submitting an Order`}</h3>\n    <p>{`In most of our built-in exchange connectors, order submission occurs in the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`_create_order()`}</code>{` function - although it may be different for some decentralized exchange connectors.`}</p>\n    <p>{`The `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`_create_order()`}</code>{` method is responsible for performing the necessary trading rule checks before submitting the order via the REST API.\nUpon receiving a successful response, a `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`BuyOrderCreatedEvent`}</code>{` or `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`SellOrderCreatedEvent`}</code>{` would be emitted. Otherwise, a `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`MarketOrderFailureEvent`}</code>{` would be emitted. Note that despite the naming, `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`MarketOrderFailureEvent`}</code>{` is emitted even for limit orders.`}</p>\n    <h3 {...{\n      \"id\": \"order-being-filled\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h3\" {...{\n        \"href\": \"#order-being-filled\",\n        \"aria-label\": \"order being filled permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Order Being Filled`}</h3>\n    <p>{`Other market participants could fill an order over time once it's live on an exchange.\nDepending on the order types, i.e. limit or market, the order could be filled either immediately or after another market participant fulfils it.`}</p>\n    <p>{`For every order fill on our orders, whether partially or entirely, the exchange connector must emit an `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`OrderFilledEvent`}</code>{`, to notify the strategy modules about the order's progress.`}</p>\n    <h3 {...{\n      \"id\": \"order-completion\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h3\" {...{\n        \"href\": \"#order-completion\",\n        \"aria-label\": \"order completion permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Order Completion`}</h3>\n    <p>{`Once an order has been completely filled, the exchange connector must emit a `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`BuyOrderCompletedEvent`}</code>{` or `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`SellOrderCompletedEvent`}</code>{`.\nThe exchange connector would stop tracking the order afterward.`}</p>\n    <p><code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`BuyOrderCompletedEvent`}</code>{` or `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`SellOrderCompletedEvent`}</code>{` should always come `}<strong parentName=\"p\">{`after`}</strong>{` an `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`OrderFilledEvent`}</code>{` has been emitted.`}</p>\n    <h3 {...{\n      \"id\": \"order-cancellation-or-expiry\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h3\" {...{\n        \"href\": \"#order-cancellation-or-expiry\",\n        \"aria-label\": \"order cancellation or expiry permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Order Cancellation or Expiry`}</h3>\n    <p>{`If an order is canceled or expired before it has been completely filled, an `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`OrderCancelledEvent`}</code>{` or an `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`OrderExpiredEvent`}</code>{` should be emitted.`}</p>\n    <p>{`For centralized exchanges, order tracking should end after emitting an `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`OrderCancelledEvent`}</code>{` or `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`OrderExpiredEvent`}</code>{`.\nOn decentralized exchanges - since it's possible for orders to be filled after cancellation or even expiry, due to block delays - the exchange connector may keep tracking the order for a certain amount of time afterwards.`}</p>\n    <h3 {...{\n      \"id\": \"order-failure\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h3\" {...{\n        \"href\": \"#order-failure\",\n        \"aria-label\": \"order failure permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Order Failure`}</h3>\n    <p>{`If a failed order has been rejected for any reason other than cancellation or expiry, `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`MarketOrderFailureEvent`}</code>{` must be emitted.`}</p>\n    <h2 {...{\n      \"id\": \"inflightorder-helper\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#inflightorder-helper\",\n        \"aria-label\": \"inflightorder helper permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`InFlightOrder Helper`}</h2>\n    <p>{`Hummingbot comes with a built-in helper class for exchange connectors to track their order status, the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`InFlightOrderBase`}</code>{` class.`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/378a505d560fc4f819704527084ed17b/connector-in-flight-uml.svg\",\n        \"alt\": \"Figure 2: InFlightOrderBase class\"\n      }}></img></p>\n    <p>{`While developers are free to extend or modify from `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`InFlightOrderBase`}</code>{` to suit their logic. There are a few conventions within Hummingbot's built-in exchange connectors for extending `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`InFlightOrderBase`}</code>{`,\nand it is recommended that new exchange connectors should stick with the same conventions.`}</p>\n    <p>{`Below are some of the functions that are required to be implemented in the new exchange connector.`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><code parentName=\"p\" {...{\n            \"className\": \"language-text\"\n          }}>{`is_done: bool`}</code></p>\n        <p parentName=\"li\">{`This property indicates whether the order is done or not, whether it has been filled or failed, canceled or expired.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><code parentName=\"p\" {...{\n            \"className\": \"language-text\"\n          }}>{`is_cancelled: bool`}</code></p>\n        <p parentName=\"li\">{`This property indicates whether the order has been canceled or not.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><code parentName=\"p\" {...{\n            \"className\": \"language-text\"\n          }}>{`is_failure: bool`}</code></p>\n        <p parentName=\"li\">{`This property indicates whether the order has been terminated before completion or not. This includes all cases like order cancellation, expiry, or rejection.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><code parentName=\"p\" {...{\n            \"className\": \"language-text\"\n          }}>{`base_asset: str`}</code></p>\n        <p parentName=\"li\">{`The base asset symbol.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><code parentName=\"p\" {...{\n            \"className\": \"language-text\"\n          }}>{`quote_asset: str`}</code></p>\n        <p parentName=\"li\">{`The quote asset symbol.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><code parentName=\"p\" {...{\n            \"className\": \"language-text\"\n          }}>{`update_exchange_order_id(str): void`}</code></p>\n        <p parentName=\"li\">{`This is called when the market connector has successfully submitted the order to the exchange and has got back an exchange-native order ID. This notifies any coroutines waiting on the `}<code parentName=\"p\" {...{\n            \"className\": \"language-text\"\n          }}>{`get_exchange_order_id()`}</code>{` function (detailed below`}{`)`}{`.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><code parentName=\"p\" {...{\n            \"className\": \"language-text\"\n          }}>{`async get_exchange_order_id(): str`}</code></p>\n        <p parentName=\"li\">{`Returns the exchange-native order ID for the order if the order has been submitted and the exchange-native order ID is known.\nOtherwise, it would wait until `}<code parentName=\"p\" {...{\n            \"className\": \"language-text\"\n          }}>{`update_exchange_order_id(str)`}</code>{` is called by the market connector.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><code parentName=\"p\" {...{\n            \"className\": \"language-text\"\n          }}>{`to_limit_order(): LimitOrder`}</code></p>\n        <p parentName=\"li\">{`Converts the in-flight order data structure to a `}<code parentName=\"p\" {...{\n            \"className\": \"language-text\"\n          }}>{`LimitOrder`}</code>{` data object. This should only be used on limit orders.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><code parentName=\"p\" {...{\n            \"className\": \"language-text\"\n          }}>{`to_json(): Dict[str, any]`}</code></p>\n        <p parentName=\"li\">{`Convert the in-flight order data structure to a dictionary that can be serialized into JSON format.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><code parentName=\"p\" {...{\n            \"className\": \"language-text\"\n          }}>{`from_json(): Dict[str, Any]`}</code></p>\n        <p parentName=\"li\">{`Convert a dictionary object containing the relevant order details into an `}<code parentName=\"p\" {...{\n            \"className\": \"language-text\"\n          }}>{`InFlightOrder`}</code>{` data structure.`}</p>\n      </li>\n    </ul>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}