{"expireTime":9007200881073062000,"key":"gatsby-plugin-mdx-entire-payload-4bdb052b5e841c499782c947085e9a3c-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import Callout from \"../../src/components/Callout\";","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":52,"offset":52},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Adding Connectors to Exchanges on Other Blockchains","position":{"start":{"line":4,"column":4,"offset":57},"end":{"line":4,"column":55,"offset":108},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":54},"end":{"line":4,"column":55,"offset":108},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Hummingbot currently has connectors to Ethereum-based exchanges and has built-in ","position":{"start":{"line":6,"column":1,"offset":110},"end":{"line":6,"column":82,"offset":191},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/CoinAlpha/hummingbot/tree/master/hummingbot/wallet/ethereum","children":[{"type":"text","value":"Ethereum wallet support","position":{"start":{"line":6,"column":83,"offset":192},"end":{"line":6,"column":106,"offset":215},"indent":[]}}],"position":{"start":{"line":6,"column":82,"offset":191},"end":{"line":6,"column":187,"offset":296},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":6,"column":187,"offset":296},"end":{"line":6,"column":188,"offset":297},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":110},"end":{"line":6,"column":188,"offset":297},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We plan to support multiple blockchains in the near future. To support blockchains other than Ethereum, connectors for new blockchains other than Ethereum would require integrations that enable the following blockchain-specific functionalities:","position":{"start":{"line":8,"column":1,"offset":299},"end":{"line":8,"column":245,"offset":543},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":299},"end":{"line":8,"column":245,"offset":543},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"interactions with blockchain wallets: import, creation, encryption","position":{"start":{"line":10,"column":3,"offset":547},"end":{"line":10,"column":69,"offset":613},"indent":[]}}],"position":{"start":{"line":10,"column":3,"offset":547},"end":{"line":10,"column":69,"offset":613},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":545},"end":{"line":10,"column":69,"offset":613},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"interactions with blockchain nodes","position":{"start":{"line":11,"column":3,"offset":616},"end":{"line":11,"column":37,"offset":650},"indent":[]}}],"position":{"start":{"line":11,"column":3,"offset":616},"end":{"line":11,"column":37,"offset":650},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":614},"end":{"line":11,"column":37,"offset":650},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"interactions with event watchers: balances, token address mappings, contract events, token events,","position":{"start":{"line":12,"column":3,"offset":653},"end":{"line":12,"column":101,"offset":751},"indent":[]}}],"position":{"start":{"line":12,"column":3,"offset":653},"end":{"line":12,"column":101,"offset":751},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":651},"end":{"line":12,"column":101,"offset":751},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"interaction with blockchain-based exchanges","position":{"start":{"line":13,"column":3,"offset":754},"end":{"line":13,"column":46,"offset":797},"indent":[]}}],"position":{"start":{"line":13,"column":3,"offset":754},"end":{"line":13,"column":46,"offset":797},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":752},"end":{"line":13,"column":46,"offset":797},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":545},"end":{"line":13,"column":46,"offset":797},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"For more information, please contact our engineering team at ","position":{"start":{"line":15,"column":1,"offset":799},"end":{"line":15,"column":62,"offset":860},"indent":[]}},{"type":"link","title":null,"url":"mailto:dev@coinalpha.com","children":[{"type":"text","value":"dev@coinalpha.com","position":{"start":{"line":15,"column":62,"offset":860},"end":{"line":15,"column":79,"offset":877},"indent":[]}}],"position":{"start":{"line":15,"column":62,"offset":860},"end":{"line":15,"column":79,"offset":877},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":15,"column":79,"offset":877},"end":{"line":15,"column":80,"offset":878},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":799},"end":{"line":15,"column":80,"offset":878},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Maintaining API Limits Using Throttle Class","position":{"start":{"line":17,"column":4,"offset":883},"end":{"line":17,"column":47,"offset":926},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":880},"end":{"line":17,"column":47,"offset":926},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The throttle functionality in the Hummingbot utils directory can be used to control the order and rate at which requests are made to the endpoint of a particular connector. For instance, it can be used to send a request to endpoints according to the set weight (or priority) at specific intervals. It is advised that this functionality is employed in connectors to prevent situations whereby API keys or IP gets blocked due to exceeding the limits by exchanges.","position":{"start":{"line":19,"column":1,"offset":928},"end":{"line":19,"column":462,"offset":1389},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":928},"end":{"line":19,"column":462,"offset":1389},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"How the throttle function works","position":{"start":{"line":21,"column":5,"offset":1395},"end":{"line":21,"column":36,"offset":1426},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":1391},"end":{"line":21,"column":36,"offset":1426},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The following code is used to explain how the throttle function works. The code is included in ","position":{"start":{"line":23,"column":1,"offset":1428},"end":{"line":23,"column":96,"offset":1523},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/CoinAlpha/hummingbot/blob/master/hummingbot/core/utils/asyncio_throttle.py","children":[{"type":"inlineCode","value":"hummingbot/core/utils/asyncio_throttle.py","position":{"start":{"line":23,"column":97,"offset":1524},"end":{"line":23,"column":140,"offset":1567},"indent":[]}}],"position":{"start":{"line":23,"column":96,"offset":1523},"end":{"line":23,"column":236,"offset":1663},"indent":[]}},{"type":"text","value":" file and can also be executed by using the Python interpreter.","position":{"start":{"line":23,"column":236,"offset":1663},"end":{"line":23,"column":299,"offset":1726},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":1428},"end":{"line":23,"column":299,"offset":1726},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"throttler = Throttler(rate_limit=(20, 1.0))\n\nasync def task(task_id, weight):\n\tasync with throttler.weighted_task(weight):\n\t\tprint(int(time.time()), f\"Cat {task_id}: Meow {weight}\")\n\nasync def test_main():\n\ttasks = [\n\t\ttask(1, 5), task(2, 15), task(3, 1), task(4, 10), task(5, 5), task(6, 5)\n\t]\n\tawait asyncio.gather(*tasks)\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(test_main())","position":{"start":{"line":25,"column":1,"offset":1728},"end":{"line":40,"column":4,"offset":2130},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"In the code above, the ","position":{"start":{"line":42,"column":1,"offset":2132},"end":{"line":42,"column":24,"offset":2155},"indent":[]}},{"type":"inlineCode","value":"Throttler","position":{"start":{"line":42,"column":24,"offset":2155},"end":{"line":42,"column":35,"offset":2166},"indent":[]}},{"type":"text","value":" class will be initiated with a ","position":{"start":{"line":42,"column":35,"offset":2166},"end":{"line":42,"column":67,"offset":2198},"indent":[]}},{"type":"inlineCode","value":"rate_limit","position":{"start":{"line":42,"column":67,"offset":2198},"end":{"line":42,"column":79,"offset":2210},"indent":[]}},{"type":"text","value":" of 20 weight per second.","position":{"start":{"line":42,"column":79,"offset":2210},"end":{"line":42,"column":104,"offset":2235},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":2132},"end":{"line":42,"column":104,"offset":2235},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Then the ","position":{"start":{"line":44,"column":1,"offset":2237},"end":{"line":44,"column":10,"offset":2246},"indent":[]}},{"type":"inlineCode","value":"task","position":{"start":{"line":44,"column":10,"offset":2246},"end":{"line":44,"column":16,"offset":2252},"indent":[]}},{"type":"text","value":" method is then defined to be the entry point for the tasks. It also prints tasks in the order in which they are executed.","position":{"start":{"line":44,"column":16,"offset":2252},"end":{"line":44,"column":138,"offset":2374},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":2237},"end":{"line":44,"column":138,"offset":2374},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Lastly, a list of tasks is created and queued.","position":{"start":{"line":46,"column":1,"offset":2376},"end":{"line":46,"column":47,"offset":2422},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":2376},"end":{"line":46,"column":47,"offset":2422},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Upon running the code, the printed output summarized that all tasks were executed in 3 seconds. Tasks 1, 3, and 4 with cumulative weights of 16 were first executed in the first second. Then Task 2 with weight 15 was completed in the next second. And tasks 5 and 6 with a cumulative weight of 10 were executed last.","position":{"start":{"line":48,"column":1,"offset":2424},"end":{"line":48,"column":315,"offset":2738},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":2424},"end":{"line":48,"column":315,"offset":2738},"indent":[]}},{"type":"jsx","value":"<Callout\n  type=\"note\"\n  body=\"\n#(1)# The maximum weight assigned to any task must be one less than the weight set in the rate_limit to avoid a situation whereby such a task would never get executed. i.e, with `rate_limit(15, 1)`, the max weight any task of that instance should have should be 14.\n#(2)# The most important tasks should have a lower weight than less important tasks.\"\n/>","position":{"start":{"line":50,"column":1,"offset":2740},"end":{"line":55,"column":3,"offset":3126},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"As of this writing, the Binance connector uses the throttler functionality and can be used as a guide for implementing the throttler functionality for new connectors.","position":{"start":{"line":57,"column":1,"offset":3128},"end":{"line":57,"column":167,"offset":3294},"indent":[]}}],"position":{"start":{"line":57,"column":1,"offset":3128},"end":{"line":57,"column":167,"offset":3294},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Miscellaneous\",\"description\":\"Other related info on developing connectors\"}","position":{"start":{"line":60,"column":1,"offset":3297},"end":{"line":60,"column":114,"offset":3410},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":60,"column":114,"offset":3410}}},"scopeImports":["import Callout from \"../../src/components/Callout\";","import * as React from 'react'"],"scopeIdentifiers":["Callout","React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Miscellaneous\",\n  \"description\": \"Other related info on developing connectors\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"adding-connectors-to-exchanges-on-other-blockchains\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#adding-connectors-to-exchanges-on-other-blockchains\",\n    \"aria-label\": \"adding connectors to exchanges on other blockchains permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Adding Connectors to Exchanges on Other Blockchains\"), mdx(\"p\", null, \"Hummingbot currently has connectors to Ethereum-based exchanges and has built-in \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/CoinAlpha/hummingbot/tree/master/hummingbot/wallet/ethereum\"\n  }), \"Ethereum wallet support\"), \".\"), mdx(\"p\", null, \"We plan to support multiple blockchains in the near future. To support blockchains other than Ethereum, connectors for new blockchains other than Ethereum would require integrations that enable the following blockchain-specific functionalities:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"interactions with blockchain wallets: import, creation, encryption\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"interactions with blockchain nodes\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"interactions with event watchers: balances, token address mappings, contract events, token events,\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"interaction with blockchain-based exchanges\")), mdx(\"p\", null, \"For more information, please contact our engineering team at \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"mailto:dev@coinalpha.com\"\n  }), \"dev@coinalpha.com\"), \".\"), mdx(\"h2\", {\n    \"id\": \"maintaining-api-limits-using-throttle-class\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#maintaining-api-limits-using-throttle-class\",\n    \"aria-label\": \"maintaining api limits using throttle class permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Maintaining API Limits Using Throttle Class\"), mdx(\"p\", null, \"The throttle functionality in the Hummingbot utils directory can be used to control the order and rate at which requests are made to the endpoint of a particular connector. For instance, it can be used to send a request to endpoints according to the set weight (or priority) at specific intervals. It is advised that this functionality is employed in connectors to prevent situations whereby API keys or IP gets blocked due to exceeding the limits by exchanges.\"), mdx(\"h3\", {\n    \"id\": \"how-the-throttle-function-works\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#how-the-throttle-function-works\",\n    \"aria-label\": \"how the throttle function works permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"How the throttle function works\"), mdx(\"p\", null, \"The following code is used to explain how the throttle function works. The code is included in \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/CoinAlpha/hummingbot/blob/master/hummingbot/core/utils/asyncio_throttle.py\"\n  }), mdx(\"code\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"hummingbot/core/utils/asyncio_throttle.py\")), \" file and can also be executed by using the Python interpreter.\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"style\": {\n      \"counterReset\": \"linenumber NaN\"\n    },\n    \"className\": \"language-text line-numbers\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"throttler = Throttler(rate_limit=(20, 1.0))\\n\\nasync def task(task_id, weight):\\n\\tasync with throttler.weighted_task(weight):\\n\\t\\tprint(int(time.time()), f\\\"Cat {task_id}: Meow {weight}\\\")\\n\\nasync def test_main():\\n\\ttasks = [\\n\\t\\ttask(1, 5), task(2, 15), task(3, 1), task(4, 10), task(5, 5), task(6, 5)\\n\\t]\\n\\tawait asyncio.gather(*tasks)\\n\\nloop = asyncio.get_event_loop()\\nloop.run_until_complete(test_main())\"), mdx(\"span\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"className\": \"line-numbers-rows\",\n    \"style\": {\n      \"whiteSpace\": \"normal\",\n      \"width\": \"auto\",\n      \"left\": \"0\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  })))), mdx(\"p\", null, \"In the code above, the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"Throttler\"), \" class will be initiated with a \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"rate_limit\"), \" of 20 weight per second.\"), mdx(\"p\", null, \"Then the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"task\"), \" method is then defined to be the entry point for the tasks. It also prints tasks in the order in which they are executed.\"), mdx(\"p\", null, \"Lastly, a list of tasks is created and queued.\"), mdx(\"p\", null, \"Upon running the code, the printed output summarized that all tasks were executed in 3 seconds. Tasks 1, 3, and 4 with cumulative weights of 16 were first executed in the first second. Then Task 2 with weight 15 was completed in the next second. And tasks 5 and 6 with a cumulative weight of 10 were executed last.\"), mdx(Callout, {\n    type: \"note\",\n    body: \"\\n#(1)# The maximum weight assigned to any task must be one less than the weight set in the rate_limit to avoid a situation whereby such a task would never get executed. i.e, with `rate_limit(15, 1)`, the max weight any task of that instance should have should be 14.\\n#(2)# The most important tasks should have a lower weight than less important tasks.\",\n    mdxType: \"Callout\"\n  }), mdx(\"p\", null, \"As of this writing, the Binance connector uses the throttler functionality and can be used as a guide for implementing the throttler functionality for new connectors.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport Callout from \"../../src/components/Callout\";\nexport const _frontmatter = {\n  \"title\": \"Miscellaneous\",\n  \"description\": \"Other related info on developing connectors\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h2 {...{\n      \"id\": \"adding-connectors-to-exchanges-on-other-blockchains\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#adding-connectors-to-exchanges-on-other-blockchains\",\n        \"aria-label\": \"adding connectors to exchanges on other blockchains permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Adding Connectors to Exchanges on Other Blockchains`}</h2>\n    <p>{`Hummingbot currently has connectors to Ethereum-based exchanges and has built-in `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/CoinAlpha/hummingbot/tree/master/hummingbot/wallet/ethereum\"\n      }}>{`Ethereum wallet support`}</a>{`.`}</p>\n    <p>{`We plan to support multiple blockchains in the near future. To support blockchains other than Ethereum, connectors for new blockchains other than Ethereum would require integrations that enable the following blockchain-specific functionalities:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`interactions with blockchain wallets: import, creation, encryption`}</li>\n      <li parentName=\"ul\">{`interactions with blockchain nodes`}</li>\n      <li parentName=\"ul\">{`interactions with event watchers: balances, token address mappings, contract events, token events,`}</li>\n      <li parentName=\"ul\">{`interaction with blockchain-based exchanges`}</li>\n    </ul>\n    <p>{`For more information, please contact our engineering team at `}<a parentName=\"p\" {...{\n        \"href\": \"mailto:dev@coinalpha.com\"\n      }}>{`dev@coinalpha.com`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"maintaining-api-limits-using-throttle-class\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#maintaining-api-limits-using-throttle-class\",\n        \"aria-label\": \"maintaining api limits using throttle class permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Maintaining API Limits Using Throttle Class`}</h2>\n    <p>{`The throttle functionality in the Hummingbot utils directory can be used to control the order and rate at which requests are made to the endpoint of a particular connector. For instance, it can be used to send a request to endpoints according to the set weight (or priority) at specific intervals. It is advised that this functionality is employed in connectors to prevent situations whereby API keys or IP gets blocked due to exceeding the limits by exchanges.`}</p>\n    <h3 {...{\n      \"id\": \"how-the-throttle-function-works\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h3\" {...{\n        \"href\": \"#how-the-throttle-function-works\",\n        \"aria-label\": \"how the throttle function works permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`How the throttle function works`}</h3>\n    <p>{`The following code is used to explain how the throttle function works. The code is included in `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/CoinAlpha/hummingbot/blob/master/hummingbot/core/utils/asyncio_throttle.py\"\n      }}><code parentName=\"a\" {...{\n          \"className\": \"language-text\"\n        }}>{`hummingbot/core/utils/asyncio_throttle.py`}</code></a>{` file and can also be executed by using the Python interpreter.`}</p>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"text\"\n    }}><pre parentName=\"div\" {...{\n        \"style\": {\n          \"counterReset\": \"linenumber NaN\"\n        },\n        \"className\": \"language-text line-numbers\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-text\"\n        }}>{`throttler = Throttler(rate_limit=(20, 1.0))\n\nasync def task(task_id, weight):\n\tasync with throttler.weighted_task(weight):\n\t\tprint(int(time.time()), f\"Cat {task_id}: Meow {weight}\")\n\nasync def test_main():\n\ttasks = [\n\t\ttask(1, 5), task(2, 15), task(3, 1), task(4, 10), task(5, 5), task(6, 5)\n\t]\n\tawait asyncio.gather(*tasks)\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(test_main())`}</code><span parentName=\"pre\" {...{\n          \"aria-hidden\": \"true\",\n          \"className\": \"line-numbers-rows\",\n          \"style\": {\n            \"whiteSpace\": \"normal\",\n            \"width\": \"auto\",\n            \"left\": \"0\"\n          }\n        }}><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span></span></pre></div>\n    <p>{`In the code above, the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Throttler`}</code>{` class will be initiated with a `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`rate_limit`}</code>{` of 20 weight per second.`}</p>\n    <p>{`Then the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`task`}</code>{` method is then defined to be the entry point for the tasks. It also prints tasks in the order in which they are executed.`}</p>\n    <p>{`Lastly, a list of tasks is created and queued.`}</p>\n    <p>{`Upon running the code, the printed output summarized that all tasks were executed in 3 seconds. Tasks 1, 3, and 4 with cumulative weights of 16 were first executed in the first second. Then Task 2 with weight 15 was completed in the next second. And tasks 5 and 6 with a cumulative weight of 10 were executed last.`}</p>\n    <Callout type=\"note\" body=\"\n#(1)# The maximum weight assigned to any task must be one less than the weight set in the rate_limit to avoid a situation whereby such a task would never get executed. i.e, with `rate_limit(15, 1)`, the max weight any task of that instance should have should be 14.\n#(2)# The most important tasks should have a lower weight than less important tasks.\" mdxType=\"Callout\" />\n    <p>{`As of this writing, the Binance connector uses the throttler functionality and can be used as a guide for implementing the throttler functionality for new connectors.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}