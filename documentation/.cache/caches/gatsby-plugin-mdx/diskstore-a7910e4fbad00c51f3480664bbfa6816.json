{"expireTime":9007200881073063000,"key":"gatsby-plugin-mdx-entire-payload-8c0086f8a63b84de37601cafbfbe9e5c-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"Architecture","position":{"start":{"line":2,"column":4,"offset":4},"end":{"line":2,"column":16,"offset":16},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":16,"offset":16},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The built-in pure market-making strategy in Hummingbot periodically requests limit order proposals from configurable order pricing and sizing plugins. It periodically refreshes the orders by canceling existing limit orders.","position":{"start":{"line":4,"column":1,"offset":18},"end":{"line":4,"column":224,"offset":241},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":18},"end":{"line":4,"column":224,"offset":241},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here's a high-level view of the logic flow inside the built-in pure market-making strategy.","position":{"start":{"line":6,"column":1,"offset":243},"end":{"line":6,"column":92,"offset":334},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":243},"end":{"line":6,"column":92,"offset":334},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"/img/pure-mm-flowchart.svg","alt":"Figure 5: Pure market making strategy logical flowchart","position":{"start":{"line":8,"column":1,"offset":336},"end":{"line":8,"column":87,"offset":422},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":336},"end":{"line":8,"column":87,"offset":422},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The pure market-making strategy operates in a tick-by-tick manner, as described in the ","position":{"start":{"line":10,"column":1,"offset":424},"end":{"line":10,"column":88,"offset":511},"indent":[]}},{"type":"link","title":null,"url":"/strategies/overview","children":[{"type":"text","value":"Strategies Overview","position":{"start":{"line":10,"column":89,"offset":512},"end":{"line":10,"column":108,"offset":531},"indent":[]}}],"position":{"start":{"line":10,"column":88,"offset":511},"end":{"line":10,"column":131,"offset":554},"indent":[]}},{"type":"text","value":" document. Each tick is typically 1 second, although it can be programmatically modified to longer or shorter durations.","position":{"start":{"line":10,"column":131,"offset":554},"end":{"line":10,"column":251,"offset":674},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":424},"end":{"line":10,"column":251,"offset":674},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The pure market-making strategy would first query the order filter plugin at each tick to proceed. Assuming the answer is yes, then it'll query the order pricing and sizing plugins and calculate whether and what market-making orders it should emit. At the same time, it'll also look at any existing limit orders it previously placed on the market and decide whether it should cancel those.","position":{"start":{"line":12,"column":1,"offset":676},"end":{"line":12,"column":390,"offset":1065},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":676},"end":{"line":12,"column":390,"offset":1065},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The process repeats over and over at each tick, causing limit orders to be periodically placed and canceled according to the proposals made by the order pricing and sizing plugins.","position":{"start":{"line":14,"column":1,"offset":1067},"end":{"line":14,"column":181,"offset":1247},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":1067},"end":{"line":14,"column":181,"offset":1247},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Plugins","position":{"start":{"line":16,"column":4,"offset":1252},"end":{"line":16,"column":11,"offset":1259},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":1249},"end":{"line":16,"column":11,"offset":1259},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"There are a few plugin interfaces that the pure market-making strategy depends on arriving at its order proposals.","position":{"start":{"line":18,"column":1,"offset":1261},"end":{"line":18,"column":115,"offset":1375},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1261},"end":{"line":18,"column":115,"offset":1375},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"/img/pure-mm-uml.svg","alt":"Figure 6: Pure market making strategy plugins","position":{"start":{"line":20,"column":1,"offset":1377},"end":{"line":20,"column":71,"offset":1447},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":1377},"end":{"line":20,"column":71,"offset":1447},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"OrderFilterDelegate","position":{"start":{"line":22,"column":3,"offset":1451},"end":{"line":22,"column":22,"offset":1470},"indent":[]}}],"position":{"start":{"line":22,"column":3,"offset":1451},"end":{"line":22,"column":22,"offset":1470},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Makes the Yes / No decision to proceed with processing the current clock tick or not.","position":{"start":{"line":24,"column":3,"offset":1474},"end":{"line":24,"column":88,"offset":1559},"indent":[]}}],"position":{"start":{"line":24,"column":3,"offset":1474},"end":{"line":24,"column":88,"offset":1559},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":1449},"end":{"line":25,"column":1,"offset":1560},"indent":[1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"OrderPricingDelegate","position":{"start":{"line":26,"column":3,"offset":1563},"end":{"line":26,"column":23,"offset":1583},"indent":[]}}],"position":{"start":{"line":26,"column":3,"offset":1563},"end":{"line":26,"column":23,"offset":1583},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Returns a PriceProposal with lists of prices for creating bid and ask orders. If no order should be created at the current clock tick (e.g. because there're already existing orders), it may choose to return empty lists instead.","position":{"start":{"line":28,"column":3,"offset":1587},"end":{"line":28,"column":230,"offset":1814},"indent":[]}}],"position":{"start":{"line":28,"column":3,"offset":1587},"end":{"line":28,"column":230,"offset":1814},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":1561},"end":{"line":29,"column":1,"offset":1815},"indent":[1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"OrderSizingDelegate","position":{"start":{"line":30,"column":3,"offset":1818},"end":{"line":30,"column":22,"offset":1837},"indent":[]}}],"position":{"start":{"line":30,"column":3,"offset":1818},"end":{"line":30,"column":22,"offset":1837},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Returns a SizingProposal with lists of order sizes for creating bid and ask orders, given the pricing proposal. If a proposed order at a certain price should not be created (e.g. there's not enough balance on the exchange), it may choose to return zero sizes for that order instead.","position":{"start":{"line":32,"column":3,"offset":1841},"end":{"line":32,"column":285,"offset":2123},"indent":[]}}],"position":{"start":{"line":32,"column":3,"offset":1841},"end":{"line":32,"column":285,"offset":2123},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":1816},"end":{"line":32,"column":285,"offset":2123},"indent":[1,1]}}],"position":{"start":{"line":22,"column":1,"offset":1449},"end":{"line":32,"column":285,"offset":2123},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Built-in Plugins","position":{"start":{"line":34,"column":4,"offset":2128},"end":{"line":34,"column":20,"offset":2144},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":2125},"end":{"line":34,"column":20,"offset":2144},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you configure the pure market-making strategy with the ","position":{"start":{"line":36,"column":1,"offset":2146},"end":{"line":36,"column":59,"offset":2204},"indent":[]}},{"type":"inlineCode","value":"order_levels","position":{"start":{"line":36,"column":59,"offset":2204},"end":{"line":36,"column":73,"offset":2218},"indent":[]}},{"type":"text","value":" parameter set to 1, then Hummingbot will use ConstantSpreadPricingDelegate and ConstantSizeSizingDelegate for the pricing and sizing plugins.","position":{"start":{"line":36,"column":73,"offset":2218},"end":{"line":36,"column":215,"offset":2360},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":2146},"end":{"line":36,"column":215,"offset":2360},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Alternatively, setting ","position":{"start":{"line":38,"column":1,"offset":2362},"end":{"line":38,"column":24,"offset":2385},"indent":[]}},{"type":"inlineCode","value":"order_levels","position":{"start":{"line":38,"column":24,"offset":2385},"end":{"line":38,"column":38,"offset":2399},"indent":[]}},{"type":"text","value":" greater than 1 places multiple levels of orders on each side of the order book. In this case, Hummingbot will use ConstantMultipleSpreadPricingDelegate and StaggeredMultipleSizeSizingDelegate for the pricing and sizing plugins instead.","position":{"start":{"line":38,"column":38,"offset":2399},"end":{"line":38,"column":274,"offset":2635},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":2362},"end":{"line":38,"column":274,"offset":2635},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"ConstantSpreadPricingDelegate","position":{"start":{"line":40,"column":5,"offset":2641},"end":{"line":40,"column":34,"offset":2670},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":2637},"end":{"line":40,"column":34,"offset":2670},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The logic of ConstantSpreadPricingDelegate is simple. It will always propose a bid and an ask order at a pre-configured spread from the current mid-price.","position":{"start":{"line":42,"column":1,"offset":2672},"end":{"line":42,"column":155,"offset":2826},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":2672},"end":{"line":42,"column":155,"offset":2826},"indent":[]}},{"type":"code","lang":"cython","meta":null,"value":"object bid_price = mid_price * (Decimal(1) - self.bid_spread)\nobject ask_price = mid_price * (Decimal(1) + self.ask_spread)","position":{"start":{"line":44,"column":1,"offset":2828},"end":{"line":47,"column":4,"offset":2965},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"It doesn't check whether you have existing orders or have enough balance to create the orders; this is normal because the sizing delegate is responsible for that.","position":{"start":{"line":49,"column":1,"offset":2967},"end":{"line":49,"column":163,"offset":3129},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":2967},"end":{"line":49,"column":163,"offset":3129},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"ConstantSizeSizingDelegate","position":{"start":{"line":51,"column":5,"offset":3135},"end":{"line":51,"column":31,"offset":3161},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":3131},"end":{"line":51,"column":31,"offset":3161},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The logic inside ConstantSizeSizingDelegate is more involved because it checks whether there are existing limit orders that are still active and whether there's enough balance in the exchange to create new orders.","position":{"start":{"line":53,"column":1,"offset":3163},"end":{"line":53,"column":214,"offset":3376},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":3163},"end":{"line":53,"column":214,"offset":3376},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In addition, this delegate is responsible for \"quantizing\" the orders, which means conforming them to the tick size and minimum order size required by this particular exchange's trading rules. Note that if the proposed order size is smaller than the minimum order size, the order size will be reduced to 0.","position":{"start":{"line":55,"column":1,"offset":3378},"end":{"line":55,"column":307,"offset":3684},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":3378},"end":{"line":55,"column":307,"offset":3684},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If all the checks are green (i.e., no active limit orders, and enough balance to make new orders) and after it has quantized the orders, the delegate will make constant order size proposals with the pre-configured size on both the bid and ask sides. Otherwise, it'll propose 0 order sizes.","position":{"start":{"line":57,"column":1,"offset":3686},"end":{"line":57,"column":290,"offset":3975},"indent":[]}}],"position":{"start":{"line":57,"column":1,"offset":3686},"end":{"line":57,"column":290,"offset":3975},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Refreshing Orders","position":{"start":{"line":59,"column":4,"offset":3980},"end":{"line":59,"column":21,"offset":3997},"indent":[]}}],"position":{"start":{"line":59,"column":1,"offset":3977},"end":{"line":59,"column":21,"offset":3997},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For each limit order that was emitted by the pure market-making strategy, an expiry timestamp would be generated for that order, and the strategy will track the order. The time until expiry for new orders is configured via the ","position":{"start":{"line":61,"column":1,"offset":3999},"end":{"line":61,"column":228,"offset":4226},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"order_refresh_time","position":{"start":{"line":61,"column":230,"offset":4228},"end":{"line":61,"column":248,"offset":4246},"indent":[]}}],"position":{"start":{"line":61,"column":228,"offset":4226},"end":{"line":61,"column":250,"offset":4248},"indent":[]}},{"type":"text","value":" parameter (See ","position":{"start":{"line":61,"column":250,"offset":4248},"end":{"line":61,"column":266,"offset":4264},"indent":[]}},{"type":"link","title":null,"url":"/strategies/pure-market-making/#basic-configuration-parameters-and-walkthrough","children":[{"type":"text","value":"parameters","position":{"start":{"line":61,"column":267,"offset":4265},"end":{"line":61,"column":277,"offset":4275},"indent":[]}}],"position":{"start":{"line":61,"column":266,"offset":4264},"end":{"line":61,"column":358,"offset":4356},"indent":[]}},{"type":"text","value":" in main documentation).","position":{"start":{"line":61,"column":358,"offset":4356},"end":{"line":61,"column":382,"offset":4380},"indent":[]}}],"position":{"start":{"line":61,"column":1,"offset":3999},"end":{"line":61,"column":382,"offset":4380},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"After an order's expiration time is reached, the pure market-making strategy will create a cancel order proposal for that order.","position":{"start":{"line":63,"column":1,"offset":4382},"end":{"line":63,"column":129,"offset":4510},"indent":[]}}],"position":{"start":{"line":63,"column":1,"offset":4382},"end":{"line":63,"column":129,"offset":4510},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Executing Order Proposals","position":{"start":{"line":65,"column":4,"offset":4515},"end":{"line":65,"column":29,"offset":4540},"indent":[]}}],"position":{"start":{"line":65,"column":1,"offset":4512},"end":{"line":65,"column":29,"offset":4540},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"After collecting all the order pricing, sizing, and cancel order proposals from plugins and the internal refresh order logic - the pure market-making strategy logic will merge all of the proposals and execute them.","position":{"start":{"line":67,"column":1,"offset":4542},"end":{"line":67,"column":215,"offset":4756},"indent":[]}}],"position":{"start":{"line":67,"column":1,"offset":4542},"end":{"line":67,"column":215,"offset":4756},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Example Order Flow","position":{"start":{"line":69,"column":4,"offset":4761},"end":{"line":69,"column":22,"offset":4779},"indent":[]}}],"position":{"start":{"line":69,"column":1,"offset":4758},"end":{"line":69,"column":22,"offset":4779},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Below is a hypothetical example of how the pure market-making strategy works for a few clock ticks.","position":{"start":{"line":71,"column":1,"offset":4781},"end":{"line":71,"column":100,"offset":4880},"indent":[]}}],"position":{"start":{"line":71,"column":1,"offset":4781},"end":{"line":71,"column":100,"offset":4880},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"At clock tick ","position":{"start":{"line":73,"column":1,"offset":4882},"end":{"line":73,"column":15,"offset":4896},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"n","position":{"start":{"line":73,"column":16,"offset":4897},"end":{"line":73,"column":17,"offset":4898},"indent":[]}}],"position":{"start":{"line":73,"column":15,"offset":4896},"end":{"line":73,"column":18,"offset":4899},"indent":[]}},{"type":"text","value":", there may be existing limit orders on both the bid and ask sides, and both have not yet expired. Assuming we're using the ","position":{"start":{"line":73,"column":18,"offset":4899},"end":{"line":73,"column":142,"offset":5023},"indent":[]}},{"type":"inlineCode","value":"ConstantSizeSizingDelegate","position":{"start":{"line":73,"column":142,"offset":5023},"end":{"line":73,"column":170,"offset":5051},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":73,"column":170,"offset":5051},"end":{"line":73,"column":175,"offset":5056},"indent":[]}},{"type":"inlineCode","value":"ConstantSpreadPricingDelegate","position":{"start":{"line":73,"column":175,"offset":5056},"end":{"line":73,"column":206,"offset":5087},"indent":[]}},{"type":"text","value":" in this case, the proposed sizes for new orders will be 0. There'll be no cancel order proposals. So the strategy will do nothing for this clock tick.","position":{"start":{"line":73,"column":206,"offset":5087},"end":{"line":73,"column":357,"offset":5238},"indent":[]}}],"position":{"start":{"line":73,"column":1,"offset":4882},"end":{"line":73,"column":357,"offset":5238},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"At clock tick ","position":{"start":{"line":75,"column":1,"offset":5240},"end":{"line":75,"column":15,"offset":5254},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"n+1","position":{"start":{"line":75,"column":16,"offset":5255},"end":{"line":75,"column":19,"offset":5258},"indent":[]}}],"position":{"start":{"line":75,"column":15,"offset":5254},"end":{"line":75,"column":20,"offset":5259},"indent":[]}},{"type":"text","value":", the limit bid order has expired. The strategy will then generate a cancel order proposal for the expired bid order. The cancellation will then be sent to the exchange and executed.","position":{"start":{"line":75,"column":20,"offset":5259},"end":{"line":75,"column":202,"offset":5441},"indent":[]}}],"position":{"start":{"line":75,"column":1,"offset":5240},"end":{"line":75,"column":202,"offset":5441},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"At clock tick ","position":{"start":{"line":77,"column":1,"offset":5443},"end":{"line":77,"column":15,"offset":5457},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"n+2","position":{"start":{"line":77,"column":16,"offset":5458},"end":{"line":77,"column":19,"offset":5461},"indent":[]}}],"position":{"start":{"line":77,"column":15,"offset":5457},"end":{"line":77,"column":20,"offset":5462},"indent":[]}},{"type":"text","value":", the ","position":{"start":{"line":77,"column":20,"offset":5462},"end":{"line":77,"column":26,"offset":5468},"indent":[]}},{"type":"inlineCode","value":"ConstantSizeSizingDelegate","position":{"start":{"line":77,"column":26,"offset":5468},"end":{"line":77,"column":54,"offset":5496},"indent":[]}},{"type":"text","value":" notices there's no longer order at the bid side. So it'll propose a non-zero order size for a new bid order. Let's assume the existing ask order hasn't expired yet, so no cancellation proposals will be generated at this clock tick. Instead, the strategy will create a bid order from the current market mid-price at the execution phase. Thus the bid order is refreshed.","position":{"start":{"line":77,"column":54,"offset":5496},"end":{"line":77,"column":423,"offset":5865},"indent":[]}}],"position":{"start":{"line":77,"column":1,"offset":5443},"end":{"line":77,"column":423,"offset":5865},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This cycle of order creation and order cancellation will repeat again and again for as long as the strategy is running. For example, if a market order fills a limit order, the strategy will refresh it at the next clock tick.","position":{"start":{"line":79,"column":1,"offset":5867},"end":{"line":79,"column":225,"offset":6091},"indent":[]}}],"position":{"start":{"line":79,"column":1,"offset":5867},"end":{"line":79,"column":225,"offset":6091},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Pure Market Making\",\"description\":\"Info on developing pure market making\"}","position":{"start":{"line":82,"column":1,"offset":6094},"end":{"line":82,"column":113,"offset":6206},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":82,"column":113,"offset":6206}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Pure Market Making\",\n  \"description\": \"Info on developing pure market making\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"architecture\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#architecture\",\n    \"aria-label\": \"architecture permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Architecture\"), mdx(\"p\", null, \"The built-in pure market-making strategy in Hummingbot periodically requests limit order proposals from configurable order pricing and sizing plugins. It periodically refreshes the orders by canceling existing limit orders.\"), mdx(\"p\", null, \"Here's a high-level view of the logic flow inside the built-in pure market-making strategy.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/26593b4432ce75c9b1ea66ca3cc29d97/pure-mm-flowchart.svg\",\n    \"alt\": \"Figure 5: Pure market making strategy logical flowchart\"\n  }))), mdx(\"p\", null, \"The pure market-making strategy operates in a tick-by-tick manner, as described in the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/strategies/overview\"\n  }), \"Strategies Overview\"), \" document. Each tick is typically 1 second, although it can be programmatically modified to longer or shorter durations.\"), mdx(\"p\", null, \"The pure market-making strategy would first query the order filter plugin at each tick to proceed. Assuming the answer is yes, then it'll query the order pricing and sizing plugins and calculate whether and what market-making orders it should emit. At the same time, it'll also look at any existing limit orders it previously placed on the market and decide whether it should cancel those.\"), mdx(\"p\", null, \"The process repeats over and over at each tick, causing limit orders to be periodically placed and canceled according to the proposals made by the order pricing and sizing plugins.\"), mdx(\"h2\", {\n    \"id\": \"plugins\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#plugins\",\n    \"aria-label\": \"plugins permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Plugins\"), mdx(\"p\", null, \"There are a few plugin interfaces that the pure market-making strategy depends on arriving at its order proposals.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/68b2e457ef5e19d42f6bacac38485cd5/pure-mm-uml.svg\",\n    \"alt\": \"Figure 6: Pure market making strategy plugins\"\n  }))), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"OrderFilterDelegate\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Makes the Yes / No decision to proceed with processing the current clock tick or not.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"OrderPricingDelegate\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Returns a PriceProposal with lists of prices for creating bid and ask orders. If no order should be created at the current clock tick (e.g. because there're already existing orders), it may choose to return empty lists instead.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"OrderSizingDelegate\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Returns a SizingProposal with lists of order sizes for creating bid and ask orders, given the pricing proposal. If a proposed order at a certain price should not be created (e.g. there's not enough balance on the exchange), it may choose to return zero sizes for that order instead.\"))), mdx(\"h2\", {\n    \"id\": \"built-in-plugins\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#built-in-plugins\",\n    \"aria-label\": \"built in plugins permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Built-in Plugins\"), mdx(\"p\", null, \"If you configure the pure market-making strategy with the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"order_levels\"), \" parameter set to 1, then Hummingbot will use ConstantSpreadPricingDelegate and ConstantSizeSizingDelegate for the pricing and sizing plugins.\"), mdx(\"p\", null, \"Alternatively, setting \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"order_levels\"), \" greater than 1 places multiple levels of orders on each side of the order book. In this case, Hummingbot will use ConstantMultipleSpreadPricingDelegate and StaggeredMultipleSizeSizingDelegate for the pricing and sizing plugins instead.\"), mdx(\"h3\", {\n    \"id\": \"constantspreadpricingdelegate\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#constantspreadpricingdelegate\",\n    \"aria-label\": \"constantspreadpricingdelegate permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"ConstantSpreadPricingDelegate\"), mdx(\"p\", null, \"The logic of ConstantSpreadPricingDelegate is simple. It will always propose a bid and an ask order at a pre-configured spread from the current mid-price.\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"cython\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"style\": {\n      \"counterReset\": \"linenumber NaN\"\n    },\n    \"className\": \"language-cython line-numbers\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cython\"\n  }), \"object bid_price = mid_price * (Decimal(1) - self.bid_spread)\\nobject ask_price = mid_price * (Decimal(1) + self.ask_spread)\"), mdx(\"span\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"className\": \"line-numbers-rows\",\n    \"style\": {\n      \"whiteSpace\": \"normal\",\n      \"width\": \"auto\",\n      \"left\": \"0\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  })))), mdx(\"p\", null, \"It doesn't check whether you have existing orders or have enough balance to create the orders; this is normal because the sizing delegate is responsible for that.\"), mdx(\"h3\", {\n    \"id\": \"constantsizesizingdelegate\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#constantsizesizingdelegate\",\n    \"aria-label\": \"constantsizesizingdelegate permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"ConstantSizeSizingDelegate\"), mdx(\"p\", null, \"The logic inside ConstantSizeSizingDelegate is more involved because it checks whether there are existing limit orders that are still active and whether there's enough balance in the exchange to create new orders.\"), mdx(\"p\", null, \"In addition, this delegate is responsible for \\\"quantizing\\\" the orders, which means conforming them to the tick size and minimum order size required by this particular exchange's trading rules. Note that if the proposed order size is smaller than the minimum order size, the order size will be reduced to 0.\"), mdx(\"p\", null, \"If all the checks are green (i.e., no active limit orders, and enough balance to make new orders) and after it has quantized the orders, the delegate will make constant order size proposals with the pre-configured size on both the bid and ask sides. Otherwise, it'll propose 0 order sizes.\"), mdx(\"h2\", {\n    \"id\": \"refreshing-orders\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#refreshing-orders\",\n    \"aria-label\": \"refreshing orders permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Refreshing Orders\"), mdx(\"p\", null, \"For each limit order that was emitted by the pure market-making strategy, an expiry timestamp would be generated for that order, and the strategy will track the order. The time until expiry for new orders is configured via the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"order_refresh_time\"), \" parameter (See \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/strategies/pure-market-making/#basic-configuration-parameters-and-walkthrough\"\n  }), \"parameters\"), \" in main documentation).\"), mdx(\"p\", null, \"After an order's expiration time is reached, the pure market-making strategy will create a cancel order proposal for that order.\"), mdx(\"h2\", {\n    \"id\": \"executing-order-proposals\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#executing-order-proposals\",\n    \"aria-label\": \"executing order proposals permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Executing Order Proposals\"), mdx(\"p\", null, \"After collecting all the order pricing, sizing, and cancel order proposals from plugins and the internal refresh order logic - the pure market-making strategy logic will merge all of the proposals and execute them.\"), mdx(\"h2\", {\n    \"id\": \"example-order-flow\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#example-order-flow\",\n    \"aria-label\": \"example order flow permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Example Order Flow\"), mdx(\"p\", null, \"Below is a hypothetical example of how the pure market-making strategy works for a few clock ticks.\"), mdx(\"p\", null, \"At clock tick \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"n\"), \", there may be existing limit orders on both the bid and ask sides, and both have not yet expired. Assuming we're using the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"ConstantSizeSizingDelegate\"), \" and \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"ConstantSpreadPricingDelegate\"), \" in this case, the proposed sizes for new orders will be 0. There'll be no cancel order proposals. So the strategy will do nothing for this clock tick.\"), mdx(\"p\", null, \"At clock tick \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"n+1\"), \", the limit bid order has expired. The strategy will then generate a cancel order proposal for the expired bid order. The cancellation will then be sent to the exchange and executed.\"), mdx(\"p\", null, \"At clock tick \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"n+2\"), \", the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"ConstantSizeSizingDelegate\"), \" notices there's no longer order at the bid side. So it'll propose a non-zero order size for a new bid order. Let's assume the existing ask order hasn't expired yet, so no cancellation proposals will be generated at this clock tick. Instead, the strategy will create a bid order from the current market mid-price at the execution phase. Thus the bid order is refreshed.\"), mdx(\"p\", null, \"This cycle of order creation and order cancellation will repeat again and again for as long as the strategy is running. For example, if a market order fills a limit order, the strategy will refresh it at the next clock tick.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Pure Market Making\",\n  \"description\": \"Info on developing pure market making\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2 {...{\n      \"id\": \"architecture\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#architecture\",\n        \"aria-label\": \"architecture permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Architecture`}</h2>\n    <p>{`The built-in pure market-making strategy in Hummingbot periodically requests limit order proposals from configurable order pricing and sizing plugins. It periodically refreshes the orders by canceling existing limit orders.`}</p>\n    <p>{`Here's a high-level view of the logic flow inside the built-in pure market-making strategy.`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/26593b4432ce75c9b1ea66ca3cc29d97/pure-mm-flowchart.svg\",\n        \"alt\": \"Figure 5: Pure market making strategy logical flowchart\"\n      }}></img></p>\n    <p>{`The pure market-making strategy operates in a tick-by-tick manner, as described in the `}<a parentName=\"p\" {...{\n        \"href\": \"/strategies/overview\"\n      }}>{`Strategies Overview`}</a>{` document. Each tick is typically 1 second, although it can be programmatically modified to longer or shorter durations.`}</p>\n    <p>{`The pure market-making strategy would first query the order filter plugin at each tick to proceed. Assuming the answer is yes, then it'll query the order pricing and sizing plugins and calculate whether and what market-making orders it should emit. At the same time, it'll also look at any existing limit orders it previously placed on the market and decide whether it should cancel those.`}</p>\n    <p>{`The process repeats over and over at each tick, causing limit orders to be periodically placed and canceled according to the proposals made by the order pricing and sizing plugins.`}</p>\n    <h2 {...{\n      \"id\": \"plugins\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#plugins\",\n        \"aria-label\": \"plugins permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Plugins`}</h2>\n    <p>{`There are a few plugin interfaces that the pure market-making strategy depends on arriving at its order proposals.`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/68b2e457ef5e19d42f6bacac38485cd5/pure-mm-uml.svg\",\n        \"alt\": \"Figure 6: Pure market making strategy plugins\"\n      }}></img></p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`OrderFilterDelegate`}</p>\n        <p parentName=\"li\">{`Makes the Yes / No decision to proceed with processing the current clock tick or not.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`OrderPricingDelegate`}</p>\n        <p parentName=\"li\">{`Returns a PriceProposal with lists of prices for creating bid and ask orders. If no order should be created at the current clock tick (e.g. because there're already existing orders), it may choose to return empty lists instead.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`OrderSizingDelegate`}</p>\n        <p parentName=\"li\">{`Returns a SizingProposal with lists of order sizes for creating bid and ask orders, given the pricing proposal. If a proposed order at a certain price should not be created (e.g. there's not enough balance on the exchange), it may choose to return zero sizes for that order instead.`}</p>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"built-in-plugins\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#built-in-plugins\",\n        \"aria-label\": \"built in plugins permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Built-in Plugins`}</h2>\n    <p>{`If you configure the pure market-making strategy with the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`order_levels`}</code>{` parameter set to 1, then Hummingbot will use ConstantSpreadPricingDelegate and ConstantSizeSizingDelegate for the pricing and sizing plugins.`}</p>\n    <p>{`Alternatively, setting `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`order_levels`}</code>{` greater than 1 places multiple levels of orders on each side of the order book. In this case, Hummingbot will use ConstantMultipleSpreadPricingDelegate and StaggeredMultipleSizeSizingDelegate for the pricing and sizing plugins instead.`}</p>\n    <h3 {...{\n      \"id\": \"constantspreadpricingdelegate\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h3\" {...{\n        \"href\": \"#constantspreadpricingdelegate\",\n        \"aria-label\": \"constantspreadpricingdelegate permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`ConstantSpreadPricingDelegate`}</h3>\n    <p>{`The logic of ConstantSpreadPricingDelegate is simple. It will always propose a bid and an ask order at a pre-configured spread from the current mid-price.`}</p>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"cython\"\n    }}><pre parentName=\"div\" {...{\n        \"style\": {\n          \"counterReset\": \"linenumber NaN\"\n        },\n        \"className\": \"language-cython line-numbers\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-cython\"\n        }}>{`object bid_price = mid_price * (Decimal(1) - self.bid_spread)\nobject ask_price = mid_price * (Decimal(1) + self.ask_spread)`}</code><span parentName=\"pre\" {...{\n          \"aria-hidden\": \"true\",\n          \"className\": \"line-numbers-rows\",\n          \"style\": {\n            \"whiteSpace\": \"normal\",\n            \"width\": \"auto\",\n            \"left\": \"0\"\n          }\n        }}><span parentName=\"span\"></span><span parentName=\"span\"></span></span></pre></div>\n    <p>{`It doesn't check whether you have existing orders or have enough balance to create the orders; this is normal because the sizing delegate is responsible for that.`}</p>\n    <h3 {...{\n      \"id\": \"constantsizesizingdelegate\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h3\" {...{\n        \"href\": \"#constantsizesizingdelegate\",\n        \"aria-label\": \"constantsizesizingdelegate permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`ConstantSizeSizingDelegate`}</h3>\n    <p>{`The logic inside ConstantSizeSizingDelegate is more involved because it checks whether there are existing limit orders that are still active and whether there's enough balance in the exchange to create new orders.`}</p>\n    <p>{`In addition, this delegate is responsible for \"quantizing\" the orders, which means conforming them to the tick size and minimum order size required by this particular exchange's trading rules. Note that if the proposed order size is smaller than the minimum order size, the order size will be reduced to 0.`}</p>\n    <p>{`If all the checks are green (i.e., no active limit orders, and enough balance to make new orders) and after it has quantized the orders, the delegate will make constant order size proposals with the pre-configured size on both the bid and ask sides. Otherwise, it'll propose 0 order sizes.`}</p>\n    <h2 {...{\n      \"id\": \"refreshing-orders\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#refreshing-orders\",\n        \"aria-label\": \"refreshing orders permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Refreshing Orders`}</h2>\n    <p>{`For each limit order that was emitted by the pure market-making strategy, an expiry timestamp would be generated for that order, and the strategy will track the order. The time until expiry for new orders is configured via the `}<strong parentName=\"p\">{`order_refresh_time`}</strong>{` parameter (See `}<a parentName=\"p\" {...{\n        \"href\": \"/strategies/pure-market-making/#basic-configuration-parameters-and-walkthrough\"\n      }}>{`parameters`}</a>{` in main documentation).`}</p>\n    <p>{`After an order's expiration time is reached, the pure market-making strategy will create a cancel order proposal for that order.`}</p>\n    <h2 {...{\n      \"id\": \"executing-order-proposals\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#executing-order-proposals\",\n        \"aria-label\": \"executing order proposals permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Executing Order Proposals`}</h2>\n    <p>{`After collecting all the order pricing, sizing, and cancel order proposals from plugins and the internal refresh order logic - the pure market-making strategy logic will merge all of the proposals and execute them.`}</p>\n    <h2 {...{\n      \"id\": \"example-order-flow\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#example-order-flow\",\n        \"aria-label\": \"example order flow permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Example Order Flow`}</h2>\n    <p>{`Below is a hypothetical example of how the pure market-making strategy works for a few clock ticks.`}</p>\n    <p>{`At clock tick `}<em parentName=\"p\">{`n`}</em>{`, there may be existing limit orders on both the bid and ask sides, and both have not yet expired. Assuming we're using the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`ConstantSizeSizingDelegate`}</code>{` and `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`ConstantSpreadPricingDelegate`}</code>{` in this case, the proposed sizes for new orders will be 0. There'll be no cancel order proposals. So the strategy will do nothing for this clock tick.`}</p>\n    <p>{`At clock tick `}<em parentName=\"p\">{`n+1`}</em>{`, the limit bid order has expired. The strategy will then generate a cancel order proposal for the expired bid order. The cancellation will then be sent to the exchange and executed.`}</p>\n    <p>{`At clock tick `}<em parentName=\"p\">{`n+2`}</em>{`, the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`ConstantSizeSizingDelegate`}</code>{` notices there's no longer order at the bid side. So it'll propose a non-zero order size for a new bid order. Let's assume the existing ask order hasn't expired yet, so no cancellation proposals will be generated at this clock tick. Instead, the strategy will create a bid order from the current market mid-price at the execution phase. Thus the bid order is refreshed.`}</p>\n    <p>{`This cycle of order creation and order cancellation will repeat again and again for as long as the strategy is running. For example, if a market order fills a limit order, the strategy will refresh it at the next clock tick.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}