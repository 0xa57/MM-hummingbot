{"expireTime":9007200881073029000,"key":"gatsby-plugin-mdx-entire-payload-71047296a7e9c7527109bd54b853244a-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":3,"children":[{"type":"text","value":"Error after running generate_certs command","position":{"start":{"line":2,"column":5,"offset":5},"end":{"line":2,"column":47,"offset":47},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":47,"offset":47},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"/img/running-logs.png","alt":"Hummingbot installed","position":{"start":{"line":4,"column":1,"offset":49},"end":{"line":4,"column":47,"offset":95},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":49},"end":{"line":4,"column":47,"offset":95},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Add permission to the cert folder or to your hummingbot instance folder: ","position":{"start":{"line":6,"column":1,"offset":97},"end":{"line":6,"column":74,"offset":170},"indent":[]}},{"type":"inlineCode","value":"sudo chmod a+rw <[instance_folder]","position":{"start":{"line":6,"column":74,"offset":170},"end":{"line":6,"column":110,"offset":206},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":6,"column":110,"offset":206},"end":{"line":6,"column":114,"offset":210},"indent":[]}},{"type":"inlineCode","value":"[certs_folder]>/\\*","position":{"start":{"line":6,"column":114,"offset":210},"end":{"line":6,"column":134,"offset":230},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":97},"end":{"line":6,"column":134,"offset":230},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":8,"column":1,"offset":232},"end":{"line":8,"column":4,"offset":235},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Gateway\",\"description\":null}","position":{"start":{"line":11,"column":1,"offset":238},"end":{"line":11,"column":67,"offset":304},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":11,"column":67,"offset":304}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Gateway\",\n  \"description\": null\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", {\n    \"id\": \"error-after-running-generate_certs-command\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#error-after-running-generate_certs-command\",\n    \"aria-label\": \"error after running generate_certs command permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Error after running generate_certs command\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/790650c25ebf26f9806c723d3bca8603/running-logs.png\",\n    \"alt\": \"Hummingbot installed\"\n  }))), mdx(\"p\", null, \"Add permission to the cert folder or to your hummingbot instance folder: \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"sudo chmod a+rw <[instance_folder]\"), \" or \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"[certs_folder]>/\\\\*\")), mdx(\"hr\", null));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Gateway\",\n  \"description\": null\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h3 {...{\n      \"id\": \"error-after-running-generate_certs-command\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h3\" {...{\n        \"href\": \"#error-after-running-generate_certs-command\",\n        \"aria-label\": \"error after running generate_certs command permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Error after running generate_certs command`}</h3>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/790650c25ebf26f9806c723d3bca8603/running-logs.png\",\n        \"alt\": \"Hummingbot installed\"\n      }}></img></p>\n    <p>{`Add permission to the cert folder or to your hummingbot instance folder: `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`sudo chmod a+rw <[instance_folder]`}</code>{` or `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`[certs_folder]>/\\\\*`}</code></p>\n    <hr></hr>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}