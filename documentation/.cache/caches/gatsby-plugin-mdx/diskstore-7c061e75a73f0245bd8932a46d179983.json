{"expireTime":9007200881073058000,"key":"gatsby-plugin-mdx-entire-payload-23a206e458025f8e94a1647a1374dfa1-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import Callout from \"../../src/components/Callout\";","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":52,"offset":52},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"The Debug Console","position":{"start":{"line":4,"column":4,"offset":57},"end":{"line":4,"column":21,"offset":74},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":54},"end":{"line":4,"column":21,"offset":74},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The debug console is a powerful tool for Hummingbot developers to inspect and modify the live states in Hummingbot while it's running. It gives access to a live Python console living in the same process as Hummingbot. It can be thought of as similar to the developer console found in most modern browsers.","position":{"start":{"line":6,"column":1,"offset":76},"end":{"line":6,"column":306,"offset":381},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":76},"end":{"line":6,"column":306,"offset":381},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Activating the Debug Console","position":{"start":{"line":8,"column":5,"offset":387},"end":{"line":8,"column":33,"offset":415},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":383},"end":{"line":8,"column":33,"offset":415},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The debug console is disabled by default. You need to enable it by setting ","position":{"start":{"line":10,"column":1,"offset":417},"end":{"line":10,"column":76,"offset":492},"indent":[]}},{"type":"inlineCode","value":"debug_console: true","position":{"start":{"line":10,"column":76,"offset":492},"end":{"line":10,"column":97,"offset":513},"indent":[]}},{"type":"text","value":" in ","position":{"start":{"line":10,"column":97,"offset":513},"end":{"line":10,"column":101,"offset":517},"indent":[]}},{"type":"inlineCode","value":"conf/conf_global.yml","position":{"start":{"line":10,"column":101,"offset":517},"end":{"line":10,"column":123,"offset":539},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":10,"column":123,"offset":539},"end":{"line":10,"column":124,"offset":540},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":417},"end":{"line":10,"column":124,"offset":540},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"/img/debug1.png","alt":"Enabling debug console in global config","position":{"start":{"line":12,"column":1,"offset":542},"end":{"line":12,"column":60,"offset":601},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":542},"end":{"line":12,"column":60,"offset":601},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Entering the Debug Console","position":{"start":{"line":14,"column":5,"offset":607},"end":{"line":14,"column":31,"offset":633},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":603},"end":{"line":14,"column":31,"offset":633},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When you start Hummingbot with debug console enabled, it will print out a \"Started debug console\" log message at the start.","position":{"start":{"line":16,"column":1,"offset":635},"end":{"line":16,"column":124,"offset":758},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":635},"end":{"line":16,"column":124,"offset":758},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"/img/debug2.png","alt":"Started debug console logm essage","position":{"start":{"line":18,"column":1,"offset":760},"end":{"line":18,"column":54,"offset":813},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":760},"end":{"line":18,"column":54,"offset":813},"indent":[]}},{"type":"jsx","value":"<Callout\n  type=\"note\"\n  body=\"The port number printed in the debug message (port 8211 in the example above), you can use `telnet` or `nc` to access the debug console by connecting to the TCP port described in the log message.\"\n/>","position":{"start":{"line":20,"column":1,"offset":815},"end":{"line":23,"column":3,"offset":1045},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"/img/debug3.png","alt":"Entering the debug console","position":{"start":{"line":25,"column":1,"offset":1047},"end":{"line":25,"column":47,"offset":1093},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":1047},"end":{"line":25,"column":47,"offset":1093},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Accessing Python Modules and Exposed Objects","position":{"start":{"line":27,"column":5,"offset":1099},"end":{"line":27,"column":49,"offset":1143},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":1095},"end":{"line":27,"column":49,"offset":1143},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Once you've entered the debug console, you have access to a fully-featured Python interpreter living in the Hummingbot process.","position":{"start":{"line":29,"column":1,"offset":1145},"end":{"line":29,"column":128,"offset":1272},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":1145},"end":{"line":29,"column":128,"offset":1272},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can access all the exposed properties under the ","position":{"start":{"line":31,"column":1,"offset":1274},"end":{"line":31,"column":53,"offset":1326},"indent":[]}},{"type":"inlineCode","value":"HummingbotApplication","position":{"start":{"line":31,"column":53,"offset":1326},"end":{"line":31,"column":76,"offset":1349},"indent":[]}},{"type":"text","value":" class via the ","position":{"start":{"line":31,"column":76,"offset":1349},"end":{"line":31,"column":91,"offset":1364},"indent":[]}},{"type":"inlineCode","value":"hb","position":{"start":{"line":31,"column":91,"offset":1364},"end":{"line":31,"column":95,"offset":1368},"indent":[]}},{"type":"text","value":" object.","position":{"start":{"line":31,"column":95,"offset":1368},"end":{"line":31,"column":103,"offset":1376},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":1274},"end":{"line":31,"column":103,"offset":1376},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here are some of the exposed properties you can access from the debug console:","position":{"start":{"line":33,"column":1,"offset":1378},"end":{"line":33,"column":79,"offset":1456},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":1378},"end":{"line":33,"column":79,"offset":1456},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"hb.strategy","position":{"start":{"line":35,"column":3,"offset":1460},"end":{"line":35,"column":16,"offset":1473},"indent":[]}},{"type":"text","value":": The currently active strategy object","position":{"start":{"line":35,"column":16,"offset":1473},"end":{"line":35,"column":54,"offset":1511},"indent":[]}}],"position":{"start":{"line":35,"column":3,"offset":1460},"end":{"line":35,"column":54,"offset":1511},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":1458},"end":{"line":35,"column":54,"offset":1511},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"hb.markets","position":{"start":{"line":36,"column":3,"offset":1514},"end":{"line":36,"column":15,"offset":1526},"indent":[]}},{"type":"text","value":": A dictionary of active market connectors","position":{"start":{"line":36,"column":15,"offset":1526},"end":{"line":36,"column":57,"offset":1568},"indent":[]}}],"position":{"start":{"line":36,"column":3,"offset":1514},"end":{"line":36,"column":57,"offset":1568},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":1512},"end":{"line":36,"column":57,"offset":1568},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"hb.acct","position":{"start":{"line":37,"column":3,"offset":1571},"end":{"line":37,"column":12,"offset":1580},"indent":[]}},{"type":"text","value":": The currently active Ethereum wallet object","position":{"start":{"line":37,"column":12,"offset":1580},"end":{"line":37,"column":57,"offset":1625},"indent":[]}}],"position":{"start":{"line":37,"column":3,"offset":1571},"end":{"line":37,"column":57,"offset":1625},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":1569},"end":{"line":37,"column":57,"offset":1625},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"hb.clock","position":{"start":{"line":38,"column":3,"offset":1628},"end":{"line":38,"column":13,"offset":1638},"indent":[]}},{"type":"text","value":": The clock object that's driving all the Hummingbot components","position":{"start":{"line":38,"column":13,"offset":1638},"end":{"line":38,"column":76,"offset":1701},"indent":[]}}],"position":{"start":{"line":38,"column":3,"offset":1628},"end":{"line":38,"column":76,"offset":1701},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":1626},"end":{"line":38,"column":76,"offset":1701},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":1458},"end":{"line":38,"column":76,"offset":1701},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"/img/debug4.png","alt":"Some exposed variables under 'hb'","position":{"start":{"line":40,"column":1,"offset":1703},"end":{"line":40,"column":54,"offset":1756},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":1703},"end":{"line":40,"column":54,"offset":1756},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Sample Ways to Use the Console","position":{"start":{"line":42,"column":5,"offset":1762},"end":{"line":42,"column":35,"offset":1792},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":1758},"end":{"line":42,"column":35,"offset":1792},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Below is an example where a developer queries the currently active bids/asks under the strategy, and the current best ask price on Binance.","position":{"start":{"line":44,"column":1,"offset":1794},"end":{"line":44,"column":140,"offset":1933},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":1794},"end":{"line":44,"column":140,"offset":1933},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"/img/debug5.png","alt":"Example","position":{"start":{"line":46,"column":1,"offset":1935},"end":{"line":46,"column":28,"offset":1962},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":1935},"end":{"line":46,"column":28,"offset":1962},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You should refer to the source code of the exposed objects to see what properties you can inspect and modify inside the debug console.","position":{"start":{"line":48,"column":1,"offset":1964},"end":{"line":48,"column":135,"offset":2098},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":1964},"end":{"line":48,"column":135,"offset":2098},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Activating debug console with docker","position":{"start":{"line":50,"column":5,"offset":2104},"end":{"line":50,"column":41,"offset":2140},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":2100},"end":{"line":50,"column":41,"offset":2140},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"First, you have to enable the debugging feature on the bot you are running by editing conf_global.yml and setting the debug_console parameter to true; you can do this with","position":{"start":{"line":52,"column":1,"offset":2142},"end":{"line":52,"column":172,"offset":2313},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":2142},"end":{"line":52,"column":172,"offset":2313},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"nano {botinstallationfolder}/hummingbot_conf/conf_global.yml","position":{"start":{"line":54,"column":1,"offset":2315},"end":{"line":54,"column":63,"offset":2377},"indent":[]}},{"type":"text","value":" .","position":{"start":{"line":54,"column":63,"offset":2377},"end":{"line":54,"column":65,"offset":2379},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":2315},"end":{"line":54,"column":65,"offset":2379},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Save the file with \"ctrl + o\" then press enter, exit the file with \"ctrl + x\"","position":{"start":{"line":56,"column":1,"offset":2381},"end":{"line":56,"column":78,"offset":2458},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":2381},"end":{"line":56,"column":78,"offset":2458},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now you will need to enter your docker's root with bash terminal capabilities to execute a command.","position":{"start":{"line":58,"column":1,"offset":2460},"end":{"line":58,"column":100,"offset":2559},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":2460},"end":{"line":58,"column":100,"offset":2559},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"docker exec -u 0 -it CONTAINTERNAME bash","position":{"start":{"line":60,"column":1,"offset":2561},"end":{"line":60,"column":43,"offset":2603},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":2561},"end":{"line":60,"column":43,"offset":2603},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now that you are inside the docker's root, you have to run ","position":{"start":{"line":62,"column":1,"offset":2605},"end":{"line":62,"column":60,"offset":2664},"indent":[]}},{"type":"inlineCode","value":"unminimize","position":{"start":{"line":62,"column":60,"offset":2664},"end":{"line":62,"column":72,"offset":2676},"indent":[]}},{"type":"text","value":" command for the system to decompress, enabling you to install packages.","position":{"start":{"line":62,"column":72,"offset":2676},"end":{"line":62,"column":144,"offset":2748},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":2605},"end":{"line":62,"column":144,"offset":2748},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The system will prompt you to install necessary packages for decompression and answer Y for yes. When essential packages are installed, input command","position":{"start":{"line":64,"column":1,"offset":2750},"end":{"line":64,"column":150,"offset":2899},"indent":[]}}],"position":{"start":{"line":64,"column":1,"offset":2750},"end":{"line":64,"column":150,"offset":2899},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"apt-get install telnet","position":{"start":{"line":66,"column":1,"offset":2901},"end":{"line":66,"column":25,"offset":2925},"indent":[]}},{"type":"text","value":" to install telnet package.","position":{"start":{"line":66,"column":25,"offset":2925},"end":{"line":66,"column":52,"offset":2952},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":2901},"end":{"line":66,"column":52,"offset":2952},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now you may connect to telnet the usual way with ","position":{"start":{"line":68,"column":1,"offset":2954},"end":{"line":68,"column":50,"offset":3003},"indent":[]}},{"type":"inlineCode","value":"telnet localhost 8211","position":{"start":{"line":68,"column":50,"offset":3003},"end":{"line":68,"column":73,"offset":3026},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":2954},"end":{"line":68,"column":73,"offset":3026},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Developer Notes","position":{"start":{"line":70,"column":4,"offset":3031},"end":{"line":70,"column":19,"offset":3046},"indent":[]}}],"position":{"start":{"line":70,"column":1,"offset":3028},"end":{"line":70,"column":19,"offset":3046},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Additional details of the scripts can be found on ","position":{"start":{"line":72,"column":3,"offset":3050},"end":{"line":72,"column":53,"offset":3100},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/CoinAlpha/hummingbot/tree/development/installation/install-from-source","children":[{"type":"text","value":"Github: Hummingbot Install Scripts","position":{"start":{"line":72,"column":54,"offset":3101},"end":{"line":72,"column":88,"offset":3135},"indent":[]}}],"position":{"start":{"line":72,"column":53,"offset":3100},"end":{"line":72,"column":180,"offset":3227},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":72,"column":180,"offset":3227},"end":{"line":72,"column":181,"offset":3228},"indent":[]}}],"position":{"start":{"line":72,"column":3,"offset":3050},"end":{"line":72,"column":181,"offset":3228},"indent":[]}}],"position":{"start":{"line":72,"column":1,"offset":3048},"end":{"line":72,"column":181,"offset":3228},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The installation instructions above use ","position":{"start":{"line":73,"column":3,"offset":3231},"end":{"line":73,"column":43,"offset":3271},"indent":[]}},{"type":"link","title":null,"url":"https://docs.conda.io/en/latest/miniconda.html","children":[{"type":"text","value":"Miniconda3","position":{"start":{"line":73,"column":44,"offset":3272},"end":{"line":73,"column":54,"offset":3282},"indent":[]}}],"position":{"start":{"line":73,"column":43,"offset":3271},"end":{"line":73,"column":103,"offset":3331},"indent":[]}},{"type":"text","value":", a lighter version of ","position":{"start":{"line":73,"column":103,"offset":3331},"end":{"line":73,"column":126,"offset":3354},"indent":[]}},{"type":"link","title":null,"url":"https://www.anaconda.com/","children":[{"type":"text","value":"Anaconda","position":{"start":{"line":73,"column":127,"offset":3355},"end":{"line":73,"column":135,"offset":3363},"indent":[]}}],"position":{"start":{"line":73,"column":126,"offset":3354},"end":{"line":73,"column":163,"offset":3391},"indent":[]}},{"type":"text","value":" which is sufficient to run Hummingbot. To learn more about the differences and what works best for you, see ","position":{"start":{"line":73,"column":163,"offset":3391},"end":{"line":73,"column":272,"offset":3500},"indent":[]}},{"type":"link","title":null,"url":"http://deeplearning.lipingyang.org/2018/12/23/anaconda-vs-miniconda-vs-virtualenv/","children":[{"type":"text","value":"this post","position":{"start":{"line":73,"column":273,"offset":3501},"end":{"line":73,"column":282,"offset":3510},"indent":[]}}],"position":{"start":{"line":73,"column":272,"offset":3500},"end":{"line":73,"column":367,"offset":3595},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":73,"column":367,"offset":3595},"end":{"line":73,"column":368,"offset":3596},"indent":[]}}],"position":{"start":{"line":73,"column":3,"offset":3231},"end":{"line":73,"column":368,"offset":3596},"indent":[]}}],"position":{"start":{"line":73,"column":1,"offset":3229},"end":{"line":73,"column":368,"offset":3596},"indent":[]}}],"position":{"start":{"line":72,"column":1,"offset":3048},"end":{"line":73,"column":368,"offset":3596},"indent":[1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Debug Console\",\"description\":\"How to activate debug console\"}","position":{"start":{"line":76,"column":1,"offset":3599},"end":{"line":76,"column":100,"offset":3698},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":76,"column":100,"offset":3698}}},"scopeImports":["import Callout from \"../../src/components/Callout\";","import * as React from 'react'"],"scopeIdentifiers":["Callout","React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Debug Console\",\n  \"description\": \"How to activate debug console\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"the-debug-console\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#the-debug-console\",\n    \"aria-label\": \"the debug console permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"The Debug Console\"), mdx(\"p\", null, \"The debug console is a powerful tool for Hummingbot developers to inspect and modify the live states in Hummingbot while it's running. It gives access to a live Python console living in the same process as Hummingbot. It can be thought of as similar to the developer console found in most modern browsers.\"), mdx(\"h3\", {\n    \"id\": \"activating-the-debug-console\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#activating-the-debug-console\",\n    \"aria-label\": \"activating the debug console permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Activating the Debug Console\"), mdx(\"p\", null, \"The debug console is disabled by default. You need to enable it by setting \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"debug_console: true\"), \" in \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"conf/conf_global.yml\"), \".\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/3fa5e6fadda21afce277219bf6b4f8a9/debug1.png\",\n    \"alt\": \"Enabling debug console in global config\"\n  }))), mdx(\"h3\", {\n    \"id\": \"entering-the-debug-console\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#entering-the-debug-console\",\n    \"aria-label\": \"entering the debug console permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Entering the Debug Console\"), mdx(\"p\", null, \"When you start Hummingbot with debug console enabled, it will print out a \\\"Started debug console\\\" log message at the start.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/a375b3e0ac77b85bc37f833222e05485/debug2.png\",\n    \"alt\": \"Started debug console logm essage\"\n  }))), mdx(Callout, {\n    type: \"note\",\n    body: \"The port number printed in the debug message (port 8211 in the example above), you can use `telnet` or `nc` to access the debug console by connecting to the TCP port described in the log message.\",\n    mdxType: \"Callout\"\n  }), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/c85c8320ab4d8b24f1131747804b6a2e/debug3.png\",\n    \"alt\": \"Entering the debug console\"\n  }))), mdx(\"h3\", {\n    \"id\": \"accessing-python-modules-and-exposed-objects\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#accessing-python-modules-and-exposed-objects\",\n    \"aria-label\": \"accessing python modules and exposed objects permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Accessing Python Modules and Exposed Objects\"), mdx(\"p\", null, \"Once you've entered the debug console, you have access to a fully-featured Python interpreter living in the Hummingbot process.\"), mdx(\"p\", null, \"You can access all the exposed properties under the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"HummingbotApplication\"), \" class via the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"hb\"), \" object.\"), mdx(\"p\", null, \"Here are some of the exposed properties you can access from the debug console:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"hb.strategy\"), \": The currently active strategy object\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"hb.markets\"), \": A dictionary of active market connectors\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"hb.acct\"), \": The currently active Ethereum wallet object\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"hb.clock\"), \": The clock object that's driving all the Hummingbot components\")), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/f142e844411e53a9d9a3ad7f218a4e34/debug4.png\",\n    \"alt\": \"Some exposed variables under 'hb'\"\n  }))), mdx(\"h3\", {\n    \"id\": \"sample-ways-to-use-the-console\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#sample-ways-to-use-the-console\",\n    \"aria-label\": \"sample ways to use the console permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Sample Ways to Use the Console\"), mdx(\"p\", null, \"Below is an example where a developer queries the currently active bids/asks under the strategy, and the current best ask price on Binance.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/11bcd33b9b6990b6c810c59d35046c2d/debug5.png\",\n    \"alt\": \"Example\"\n  }))), mdx(\"p\", null, \"You should refer to the source code of the exposed objects to see what properties you can inspect and modify inside the debug console.\"), mdx(\"h3\", {\n    \"id\": \"activating-debug-console-with-docker\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#activating-debug-console-with-docker\",\n    \"aria-label\": \"activating debug console with docker permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Activating debug console with docker\"), mdx(\"p\", null, \"First, you have to enable the debugging feature on the bot you are running by editing conf_global.yml and setting the debug_console parameter to true; you can do this with\"), mdx(\"p\", null, mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"nano {botinstallationfolder}/hummingbot_conf/conf_global.yml\"), \" .\"), mdx(\"p\", null, \"Save the file with \\\"ctrl + o\\\" then press enter, exit the file with \\\"ctrl + x\\\"\"), mdx(\"p\", null, \"Now you will need to enter your docker's root with bash terminal capabilities to execute a command.\"), mdx(\"p\", null, mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"docker exec -u 0 -it CONTAINTERNAME bash\")), mdx(\"p\", null, \"Now that you are inside the docker's root, you have to run \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"unminimize\"), \" command for the system to decompress, enabling you to install packages.\"), mdx(\"p\", null, \"The system will prompt you to install necessary packages for decompression and answer Y for yes. When essential packages are installed, input command\"), mdx(\"p\", null, mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"apt-get install telnet\"), \" to install telnet package.\"), mdx(\"p\", null, \"Now you may connect to telnet the usual way with \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"telnet localhost 8211\")), mdx(\"h2\", {\n    \"id\": \"developer-notes\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#developer-notes\",\n    \"aria-label\": \"developer notes permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Developer Notes\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Additional details of the scripts can be found on \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/CoinAlpha/hummingbot/tree/development/installation/install-from-source\"\n  }), \"Github: Hummingbot Install Scripts\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The installation instructions above use \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://docs.conda.io/en/latest/miniconda.html\"\n  }), \"Miniconda3\"), \", a lighter version of \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.anaconda.com/\"\n  }), \"Anaconda\"), \" which is sufficient to run Hummingbot. To learn more about the differences and what works best for you, see \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://deeplearning.lipingyang.org/2018/12/23/anaconda-vs-miniconda-vs-virtualenv/\"\n  }), \"this post\"), \".\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport Callout from \"../../src/components/Callout\";\nexport const _frontmatter = {\n  \"title\": \"Debug Console\",\n  \"description\": \"How to activate debug console\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h2 {...{\n      \"id\": \"the-debug-console\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#the-debug-console\",\n        \"aria-label\": \"the debug console permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`The Debug Console`}</h2>\n    <p>{`The debug console is a powerful tool for Hummingbot developers to inspect and modify the live states in Hummingbot while it's running. It gives access to a live Python console living in the same process as Hummingbot. It can be thought of as similar to the developer console found in most modern browsers.`}</p>\n    <h3 {...{\n      \"id\": \"activating-the-debug-console\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h3\" {...{\n        \"href\": \"#activating-the-debug-console\",\n        \"aria-label\": \"activating the debug console permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Activating the Debug Console`}</h3>\n    <p>{`The debug console is disabled by default. You need to enable it by setting `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`debug_console: true`}</code>{` in `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`conf/conf_global.yml`}</code>{`.`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/3fa5e6fadda21afce277219bf6b4f8a9/debug1.png\",\n        \"alt\": \"Enabling debug console in global config\"\n      }}></img></p>\n    <h3 {...{\n      \"id\": \"entering-the-debug-console\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h3\" {...{\n        \"href\": \"#entering-the-debug-console\",\n        \"aria-label\": \"entering the debug console permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Entering the Debug Console`}</h3>\n    <p>{`When you start Hummingbot with debug console enabled, it will print out a \"Started debug console\" log message at the start.`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/a375b3e0ac77b85bc37f833222e05485/debug2.png\",\n        \"alt\": \"Started debug console logm essage\"\n      }}></img></p>\n    <Callout type=\"note\" body=\"The port number printed in the debug message (port 8211 in the example above), you can use `telnet` or `nc` to access the debug console by connecting to the TCP port described in the log message.\" mdxType=\"Callout\" />\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/c85c8320ab4d8b24f1131747804b6a2e/debug3.png\",\n        \"alt\": \"Entering the debug console\"\n      }}></img></p>\n    <h3 {...{\n      \"id\": \"accessing-python-modules-and-exposed-objects\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h3\" {...{\n        \"href\": \"#accessing-python-modules-and-exposed-objects\",\n        \"aria-label\": \"accessing python modules and exposed objects permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Accessing Python Modules and Exposed Objects`}</h3>\n    <p>{`Once you've entered the debug console, you have access to a fully-featured Python interpreter living in the Hummingbot process.`}</p>\n    <p>{`You can access all the exposed properties under the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`HummingbotApplication`}</code>{` class via the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`hb`}</code>{` object.`}</p>\n    <p>{`Here are some of the exposed properties you can access from the debug console:`}</p>\n    <ul>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`hb.strategy`}</code>{`: The currently active strategy object`}</li>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`hb.markets`}</code>{`: A dictionary of active market connectors`}</li>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`hb.acct`}</code>{`: The currently active Ethereum wallet object`}</li>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`hb.clock`}</code>{`: The clock object that's driving all the Hummingbot components`}</li>\n    </ul>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/f142e844411e53a9d9a3ad7f218a4e34/debug4.png\",\n        \"alt\": \"Some exposed variables under 'hb'\"\n      }}></img></p>\n    <h3 {...{\n      \"id\": \"sample-ways-to-use-the-console\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h3\" {...{\n        \"href\": \"#sample-ways-to-use-the-console\",\n        \"aria-label\": \"sample ways to use the console permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Sample Ways to Use the Console`}</h3>\n    <p>{`Below is an example where a developer queries the currently active bids/asks under the strategy, and the current best ask price on Binance.`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/11bcd33b9b6990b6c810c59d35046c2d/debug5.png\",\n        \"alt\": \"Example\"\n      }}></img></p>\n    <p>{`You should refer to the source code of the exposed objects to see what properties you can inspect and modify inside the debug console.`}</p>\n    <h3 {...{\n      \"id\": \"activating-debug-console-with-docker\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h3\" {...{\n        \"href\": \"#activating-debug-console-with-docker\",\n        \"aria-label\": \"activating debug console with docker permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Activating debug console with docker`}</h3>\n    <p>{`First, you have to enable the debugging feature on the bot you are running by editing conf_global.yml and setting the debug_console parameter to true; you can do this with`}</p>\n    <p><code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`nano {botinstallationfolder}/hummingbot_conf/conf_global.yml`}</code>{` .`}</p>\n    <p>{`Save the file with \"ctrl + o\" then press enter, exit the file with \"ctrl + x\"`}</p>\n    <p>{`Now you will need to enter your docker's root with bash terminal capabilities to execute a command.`}</p>\n    <p><code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`docker exec -u 0 -it CONTAINTERNAME bash`}</code></p>\n    <p>{`Now that you are inside the docker's root, you have to run `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`unminimize`}</code>{` command for the system to decompress, enabling you to install packages.`}</p>\n    <p>{`The system will prompt you to install necessary packages for decompression and answer Y for yes. When essential packages are installed, input command`}</p>\n    <p><code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`apt-get install telnet`}</code>{` to install telnet package.`}</p>\n    <p>{`Now you may connect to telnet the usual way with `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`telnet localhost 8211`}</code></p>\n    <h2 {...{\n      \"id\": \"developer-notes\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#developer-notes\",\n        \"aria-label\": \"developer notes permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Developer Notes`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Additional details of the scripts can be found on `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/CoinAlpha/hummingbot/tree/development/installation/install-from-source\"\n        }}>{`Github: Hummingbot Install Scripts`}</a>{`.`}</li>\n      <li parentName=\"ul\">{`The installation instructions above use `}<a parentName=\"li\" {...{\n          \"href\": \"https://docs.conda.io/en/latest/miniconda.html\"\n        }}>{`Miniconda3`}</a>{`, a lighter version of `}<a parentName=\"li\" {...{\n          \"href\": \"https://www.anaconda.com/\"\n        }}>{`Anaconda`}</a>{` which is sufficient to run Hummingbot. To learn more about the differences and what works best for you, see `}<a parentName=\"li\" {...{\n          \"href\": \"http://deeplearning.lipingyang.org/2018/12/23/anaconda-vs-miniconda-vs-virtualenv/\"\n        }}>{`this post`}</a>{`.`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}